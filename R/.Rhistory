morph <- morph[as.vector(colnames(new_counts)),]
#morph <- na.omit(morph[,c(1,2,3,4,5,12,47:52)]) #morph plus diet
morph <- na.omit(morph[,c(1,2,3,4,5,12,29:52)]) #morph plus primary sub, foraging, and diet
morph.log <- log10(morph[,1:6])
#morph[,7:12][morph[,7:12] == 5] <- 1
#morph[,7:30][morph[,7:30] == 5] <- 1
#morph.gow <- morph[,7:12]
#morph <- cbind(morph.log, morph[,7:12])
#morph <- cbind(morph.log, morph[,7:30])
#morph <- morph[,-c(12,14,21,23)]
#morph.pc <- prcomp(morph.log, center=T, scale=T)
large.tree <- read.tree(file="grids_tree_3_10_16.tre")
morph.pc <- prcomp(morph.log, center=T, scale=T)
morph.pc$L
summary(morph.pc)
morph.scores <- as.data.frame(scale(morph.pc$S))
morph.scores <- as.data.frame(scale(morph.pc$x))
morph.scores.1.2 <- morph.scores[,1:2]
morph.scores.1 <- as.data.frame(morph.scores.1.2[,1])
morph.scores.2 <- as.data.frame(morph.scores.1.2[,2])
morph.scores.3 <- as.data.frame(morph.scores[,3])
morph.scores.4 <- as.data.frame(morph.scores[,4])
rownames(morph.scores.1) <- as.vector(rownames(morph))
colnames(morph.scores.1) <- c("PC1")
rownames(morph.scores.2) <- as.vector(rownames(morph))
colnames(morph.scores.2) <- c("PC2")
rownames(morph.scores.3) <- as.vector(rownames(morph))
colnames(morph.scores.3) <- c("PC3")
rownames(morph.scores.4) <- as.vector(rownames(morph))
colnames(morph.scores
morph.scores <- as.data.frame(scale(morph.pc$x))
morph.scores.1.2 <- morph.scores[,1:2]
morph.scores.1 <- as.data.frame(morph.scores.1.2[,1])
morph.scores.2 <- as.data.frame(morph.scores.1.2[,2])
morph.scores.3 <- as.data.frame(morph.scores[,3])
morph.scores.4 <- as.data.frame(morph.scores[,4])
rownames(morph.scores.1) <- as.vector(rownames(morph))
colnames(morph.scores.1) <- c("PC1")
rownames(morph.scores.2) <- as.vector(rownames(morph))
colnames(morph.scores.2) <- c("PC2")
rownames(morph.scores.3) <- as.vector(rownames(morph))
colnames(morph.scores.3) <- c("PC3")
rownames(morph.scores.4) <- as.vector(rownames(morph))
colnames(morph.scores.4) <- c("PC4")
PC1_val <- as.vector(morph.scores.1[,1])
PC_birds <- as.vector(rownames(morph.scores.1))
PC1_matched <- morph.scores.1[match(colnames(new_counts),PC_birds),1];
summary(PC1_matched)
PC2_val <- as.vector(morph.scores.2[,1])
PC_birds <- as.vector(rownames(morph.scores.2))
PC2_matched <- morph.scores.2[match(colnames(new_counts),PC_birds),1];
summary(PC2_matched)
PC3_val <- as.vector(morph.scores.3[,1])
PC_birds <- as.vector(rownames(morph.scores.3))
PC3_matched <- morph.scores.3[match(colnames(new_counts),PC_birds),1];
summary(PC3_matched)
PC4_val <- as.vector(morph.scores.4[,1])
PC_birds <- as.vector(rownames(morph.scores.4))
PC4_matched <- morph.scores.4[match(colnames(new_counts),PC_birds),1];
summary(PC4_matched)
tmp_1 <- krige_counts(new_counts, PC1_matched)
ordered_counts1 <- as.matrix(tmp_1$output_data)
tmp_2 <- krige_counts(new_counts, PC2_matched)
ordered_counts2 <- as.matrix(tmp_2$output_data)
tmp_3 <- krige_counts(new_counts, PC3_matched)
ordered_counts3 <- as.matrix(tmp_3$output_data)
tmp_4 <- krige_counts(new_counts, PC4_matched)
ordered_counts4 <- as.matrix(tmp_4$output_data)
dim(ordered_counts4)
test_krig<-cbind(tmp_1$old_locs, as.numeric(tmp_1$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3), main = "Input data before interpolation, PC1 values")
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC1 values")
test_krig<-cbind(tmp_1$old_locs, as.numeric(tmp_1$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3), main = "Input data before interpolation, PC1 values")
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC1 values")
test_krig<-cbind(tmp_1$old_locs, as.numeric(tmp_1$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3), main = "Input data before interpolation, PC1 values")
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC1 values")
vec1
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
test_krig
test_krig[1,2]
test_krig[1,1]
plot(tmp_1$output_data[6,], type="l")
plot(tmp_1$input_data[6,], type="l")
dim(tmp_1$output_data)
dim(tmp_1$input_data)
plot(tmp_1$output_data[3,], type="l")
plot(tmp_1$input_data[3,], type="l")
test_krig<-cbind(tmp_2$old_locs, as.numeric(tmp_2$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3), main = "Input data before interpolation, PC2 values")
test_krig<-cbind(tmp_2$new_locs, as.numeric(tmp_2$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC2 values")
plot(density(vec1), main = "Output data after interpolation, PC2 values")
plot(density(vec3), main = "Input data before interpolation, PC2 values")
test_krig<-cbind(tmp_3$old_locs, as.numeric(tmp_3$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3),main="Input data before interpolation, PC3 values")
test_krig<-cbind(tmp_3$new_locs, as.numeric(tmp_3$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
test_krig<-cbind(tmp_3$old_locs, as.numeric(tmp_3$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3),main="Input data before interpolation, PC3 values")
test_krig<-cbind(tmp_3$new_locs, as.numeric(tmp_3$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
test_krig<-cbind(tmp_2$old_locs, as.numeric(tmp_2$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3), main = "Input data before interpolation, PC2 values")
test_krig<-cbind(tmp_2$new_locs, as.numeric(tmp_2$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC2 values")
test_krig<-cbind(tmp_4$old_locs, as.numeric(tmp_4$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3),main="Input data before interpolation, PC3 values")
test_krig<-cbind(tmp_4$new_locs, as.numeric(tmp_4$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
plot(tmp_4$output_data[6,])
plot(tmp_4$output_data[6,])
plot(tmp_4$input_data[6,])
plot(tmp_4$output_data[6,])
tmp_4$output_data
tmp_4$output_data[6,]
tmp_4$input_data[6,]
source('~/.active-rstudio-document')
tmp_4 <- krige_counts(new_counts, PC4_matched)
tmp_4$output_data[6,]
tmp_4$input_data[6,]
max(tmp_4$input_data[6,])
which.max(tmp_4$input_data[6,])
PC4_matched
new_counts[1:5,1:%]
new_counts[1:5,1:5]
local_data <- new_counts
ordering_vec <- PC4_matched
ordered_vec <- ordering_vec[order(ordering_vec, decreasing=FALSE)];
new_colnames <- colnames(local_data)[order(ordering_vec, decreasing=FALSE)]
numxx = ceiling(log(dim(local_data)[2], base=2))
ranges = ordered_vec[2:length(ordered_vec)] - ordered_vec[1:(length(ordered_vec)-1)]
ordered_vec
ranges_normalized = ranges/sum(ranges)
tab_missing = round(ranges_normalized*(2^{numxx} - dim(local_data)[2]))
if((sum(tab_missing)+dim(local_data)[2]) < 2^numxx){
out <- t(rmultinom((2^numxx - (sum(tab_missing)+dim(local_data)[2])), 1, prob= ranges_normalized))
tab_missing_2 <- colSums(out) + tab_missing} else if ((sum(tab_missing)+dim(local_data)[2])  > 2^numxx ){
out <- t(rmultinom(((sum(tab_missing)+dim(local_data)[2]) - 2^numxx), 1, prob= ranges_normalized))
tab_missing_2 <- colSums(out) + tab_missing
}
new_locs = numeric()
for(k in 1:length(ranges)){
if(k==1){
new_locs <- c(new_locs, seq(ordered_vec[k], ordered_vec[(k+1)], length.out=tab_missing_2[k]+2))
}else{
new_locs <- c(new_locs, seq(ordered_vec[k], ordered_vec[(k+1)], length.out=tab_missing_2[k]+2)[-1])
}
}
new_locs
ordered_vec
match(ordered_vec, new_locs)
ordered_vec <- ordering_vec[order(ordering_vec, decreasing=FALSE)];
new_colnames <- colnames(local_data)[order(ordering_vec, decreasing=FALSE)]
numxx = ceiling(log(dim(local_data)[2], base=2))
ranges = ordered_vec[2:length(ordered_vec)] - ordered_vec[1:(length(ordered_vec)-1)]
ranges_normalized = ranges/sum(ranges)
tab_missing = round(ranges_normalized*(2^{numxx} - dim(local_data)[2]))
if((sum(tab_missing)+dim(local_data)[2]) < 2^numxx){
out <- t(rmultinom((2^numxx - (sum(tab_missing)+dim(local_data)[2])), 1, prob= ranges_normalized))
tab_missing_2 <- colSums(out) + tab_missing} else if ((sum(tab_missing)+dim(local_data)[2])  > 2^numxx ){
out <- t(rmultinom(((sum(tab_missing)+dim(local_data)[2]) - 2^numxx), 1, prob= ranges_normalized))
tab_missing_2 <- colSums(out) + tab_missing
}
new_locs = numeric()
for(k in 1:length(ranges)){
if(k==1){
new_locs <- c(new_locs, seq(ordered_vec[k], ordered_vec[(k+1)], length.out=tab_missing_2[k]+2))
}else{
new_locs <- c(new_locs, seq(ordered_vec[k], ordered_vec[(k+1)], length.out=tab_missing_2[k]+2)[-1])
}
}
interpolated_counts <- matrix(0, dim(local_data)[1], 2^numxx)
temp_counts <- matrix(0, dim(local_data)[1], dim(local_data)[2])
for(m in 1:dim(local_data)[1]){
temp_counts[m,] <- as.numeric(local_data[m, order(ordering_vec, decreasing=FALSE)])
out <- SpatialExtremes::kriging(log(temp_counts[m,]+1), ordered_vec, new_locs, cov.mod = "whitmat",
sill=sill, range=range, smooth=smooth)
interpolated_counts[m,] <- as.numeric(floor(exp(out$krig.est)))
}
interpolated_counts[which(interpolated_counts > 0)] <- interpolated_counts[which(interpolated_counts > 0)] - 1
rownames(interpolated_counts) <- rownames(local_data)
rownames(temp_counts) <- rownames(local_data)
colnames(temp_counts) <- new_colnames
colnames(interpolated_counts)[match(ordered_vec, new_locs)] <- new_colnames
colnames(interpolated_counts)[-match(ordered_vec, new_locs)] <- paste0("Interpolated:", dim(interpolated_counts)[2] - dim(local_data)[2])
smooth
smooth = 0.75
range = 0.5
sill <- 1
ordered_vec <- ordering_vec[order(ordering_vec, decreasing=FALSE)];
new_colnames <- colnames(local_data)[order(ordering_vec, decreasing=FALSE)]
numxx = ceiling(log(dim(local_data)[2], base=2))
ranges = ordered_vec[2:length(ordered_vec)] - ordered_vec[1:(length(ordered_vec)-1)]
ranges_normalized = ranges/sum(ranges)
tab_missing = round(ranges_normalized*(2^{numxx} - dim(local_data)[2]))
if((sum(tab_missing)+dim(local_data)[2]) < 2^numxx){
out <- t(rmultinom((2^numxx - (sum(tab_missing)+dim(local_data)[2])), 1, prob= ranges_normalized))
tab_missing_2 <- colSums(out) + tab_missing} else if ((sum(tab_missing)+dim(local_data)[2])  > 2^numxx ){
out <- t(rmultinom(((sum(tab_missing)+dim(local_data)[2]) - 2^numxx), 1, prob= ranges_normalized))
tab_missing_2 <- colSums(out) + tab_missing
}
new_locs = numeric()
for(k in 1:length(ranges)){
if(k==1){
new_locs <- c(new_locs, seq(ordered_vec[k], ordered_vec[(k+1)], length.out=tab_missing_2[k]+2))
}else{
new_locs <- c(new_locs, seq(ordered_vec[k], ordered_vec[(k+1)], length.out=tab_missing_2[k]+2)[-1])
}
}
interpolated_counts <- matrix(0, dim(local_data)[1], 2^numxx)
temp_counts <- matrix(0, dim(local_data)[1], dim(local_data)[2])
for(m in 1:dim(local_data)[1]){
temp_counts[m,] <- as.numeric(local_data[m, order(ordering_vec, decreasing=FALSE)])
out <- SpatialExtremes::kriging(log(temp_counts[m,]+1), ordered_vec, new_locs, cov.mod = "whitmat",
sill=sill, range=range, smooth=smooth)
interpolated_counts[m,] <- as.numeric(floor(exp(out$krig.est)))
}
interpolated_counts[which(interpolated_counts > 0)] <- interpolated_counts[which(interpolated_counts > 0)] - 1
rownames(interpolated_counts) <- rownames(local_data)
rownames(temp_counts) <- rownames(local_data)
colnames(temp_counts) <- new_colnames
colnames(interpolated_counts)[match(ordered_vec, new_locs)] <- new_colnames
colnames(interpolated_counts)[-match(ordered_vec, new_locs)] <- paste0("Interpolated:", dim(interpolated_counts)[2] - dim(local_data)[2])
interpolated_counts[1:5,1:5]
rownames(interpolated_counts) <- rownames(local_data)
rownames(temp_counts) <- rownames(local_data)
colnames(temp_counts) <- new_colnames
colnames(interpolated_counts)[match(ordered_vec, new_locs)] <- new_colnames
colnames(interpolated_counts)[-match(ordered_vec, new_locs)] <- paste0("Interpolated:", 1: (dim(interpolated_counts)[2] - dim(local_data)[2]))
interpolated_counts[1:5,1:5]
interpolated_counts[6,]
m <- 6
temp_counts[m,] <- as.numeric(local_data[m, order(ordering_vec, decreasing=FALSE)])
log(temp_counts[m,]+1)
out <- SpatialExtremes::kriging(log(temp_counts[m,]+1), ordered_vec, new_locs, cov.mod = "whitmat",
sill=sill, range=range, smooth=smooth)
out
as.numeric(floor(exp(out$krig.est)))
out
out[475:485]
out
dim(out)
out$krig.est
out$krig.est[475:485]
out$weights
out$weights[475:485]
dim(out$weights)
out$weights[,480]
range = 0.3
range = 0.2
smooth = 0.5
out <- SpatialExtremes::kriging(log(temp_counts[m,]+1), ordered_vec, new_locs, cov.mod = "whitmat",
sill=sill, range=range, smooth=smooth)
out[475:485]
out$krig.est[475:485]
as.numeric(floor(exp(out$krig.est)))
plot(temp_counts[6,])
plot(as.numeric(floor(exp(out$krig.est))))
smooth = 0.3
range = 0.2
temp_counts[m,] <- as.numeric(local_data[m, order(ordering_vec, decreasing=FALSE)])
out <- SpatialExtremes::kriging(log(temp_counts[m,]+1), ordered_vec, new_locs, cov.mod = "whitmat",
sill=sill, range=range, smooth=smooth)
out
as.numeric(floor(exp(out$krig.est)))
source('~/Documents/topotpx-ghpages/project/R/krige_counts.R')
tmp_1 <- krige_counts(new_counts, PC1_matched)
ordered_counts1 <- as.matrix(tmp_1$output_data)
tmp_2 <- krige_counts(new_counts, PC2_matched)
source('~/Documents/topotpx-ghpages/project/R/krige_counts.R')
ordered_counts2 <- as.matrix(tmp_2$output_data)
tmp_3 <- krige_counts(new_counts, PC3_matched)
ordered_counts3 <- as.matrix(tmp_3$output_data)
tmp_4 <- krige_counts(new_counts, PC4_matched)
source('~/Documents/topotpx-ghpages/project/R/krige_counts.R')
tmp_1 <- krige_counts(new_counts, PC1_matched)
ordered_counts1 <- as.matrix(tmp_1$output_data)
tmp_2 <- krige_counts(new_counts, PC2_matched)
ordered_counts2 <- as.matrix(tmp_2$output_data)
tmp_3 <- krige_counts(new_counts, PC3_matched)
ordered_counts3 <- as.matrix(tmp_3$output_data)
tmp_4 <- krige_counts(new_counts, PC4_matched)
test_krig<-cbind(tmp_4$old_locs, as.numeric(tmp_4$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3),main="Input data before interpolation, PC3 values")
test_krig<-cbind(tmp_4$new_locs, as.numeric(tmp_4$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
test_krig<-cbind(tmp_4$old_locs, as.numeric(tmp_4$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3),main="Input data before interpolation, PC3 values")
test_krig<-cbind(tmp_4$new_locs, as.numeric(tmp_4$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
plot(tmp_4$output_data[6,])
plot(tmp_4$input_data[6,])
test_krig<-cbind(tmp_4$new_locs, as.numeric(tmp_4$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
plot(tmp_4$output_data[6,])
plot(tmp_4$input_data[6,])
test_krig<-cbind(tmp_4$new_locs, as.numeric(tmp_4$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
test_krig<-cbind(tmp_4$old_locs, as.numeric(tmp_4$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3),main="Input data before interpolation, PC3 values")
test_krig<-cbind(tmp_3$old_locs, as.numeric(tmp_3$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3),main="Input data before interpolation, PC3 values")
test_krig<-cbind(tmp_3$new_locs, as.numeric(tmp_3$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1),main="Output data after interpolation, PC3 values")
test_krig<-cbind(tmp_2$old_locs, as.numeric(tmp_2$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3), main = "Input data before interpolation, PC2 values")
test_krig<-cbind(tmp_2$new_locs, as.numeric(tmp_2$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC2 values")
test_krig<-cbind(tmp_1$old_locs, as.numeric(tmp_1$input_data[6,]))
vec3 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec4 <- rep(test_krig[i,1],test_krig[i,2])
vec3 <- c(vec3,vec4)
}
plot(density(vec3), main = "Input data before interpolation, PC1 values")
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC1 values")
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC1 values")
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC1 values")
test_krig<-cbind(tmp_1$new_locs, as.numeric(tmp_1$output_data[6,]))
vec1 <- rep(test_krig[1,1],test_krig[1,2])
for (i in 2:nrow(test_krig)){
vec2 <- rep(test_krig[i,1],test_krig[i,2])
vec1 <- c(vec1,vec2)
}
plot(density(vec1), main = "Output data after interpolation, PC1 values")
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
configure.vars="PKG_MOSEKHOME=/Users/kushal/mosek/8/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64",
repos="http://download.mosek.com/R/8")
library(Rmosek)
require(Rmosek)
lo1       <- list()
lo1$sense <- "max"
lo1$c <- c(3,1,5,1)
lo1$A <- Matrix(c(3,1,2,0,
2,1,3,1,
0,2,0,3),
nrow=3, byrow=TRUE, sparse=TRUE)
lo1$bc <- rbind(blc = c(30,15,-Inf),
buc = c(30,Inf,25))
lo1$bx <- rbind(blx = c(0,0,0,0),
bux = c(Inf,10,Inf,Inf))
r      <- mosek(lo1)
install.packages('REBayes')
devtools::install_github("gaow/pfar")
devtools::install_github("gaow/pfar", force=TRUE)
0.14*44
44166*0.14
model <- get(load("../utilities/modern_Pinhasi_Lazaridis/clus_3/model.rda"))
setwd("~/Documents/ancient-damage/R")
model <- get(load("../utilities/modern_Pinhasi_Lazaridis/clus_3/model.rda"))
model
model[[1]]
theta_pool <- model$theta
ll <- theta_breakdown(theta_pool)
