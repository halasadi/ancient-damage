lineport_x = 0.9, lineport_y=0.40, lineport_width=0.32, lineport_height=0.28,
breaklogoport_x = 1.00, breaklogoport_y = 0.40, breaklogoport_width=0.40, breaklogoport_height=0.50,
barport_x = 0.58, barport_y=0.60, barport_width=0.25, barport_height=0.25,
output_width = 1200, output_height = 700)
logo.control <- modifyList(logo.control, logo.control.default)
dir <- "../data/Tyrolean_Iceman/"
out <- aggregate_signature_counts(dir,
breaks = c(-1, seq(1,20,1)),
flanking_bases = 1,
pattern = "Ajv59.hs37d5.fa.merged.q30.csv")
source('~/Documents/aRchaic.site/R/aggregate_signature_counts.R')
out <- aggregate_signature_counts(dir,
breaks = c(-1, seq(1,20,1)),
flanking_bases = 1,
pattern = "Ajv59.hs37d5.fa.merged.q30.csv")
dir <- "../data/Tyrolean_Iceman/"
out <- aggregate_signature_counts(dir,
breaks = c(-1, seq(1,20,1)),
flanking_bases = 1,
pattern = "Ajv59.hs37d5.fa.merged.q30.csv")
dir <- "../data/Tyrolean_Iceman/"
file = "teresa.srt.subsampled.q30.csv"
breaks = c(-1, seq(1,20,1))
flanking_bases =1
logo.control = list()
logo.control.default <- list(sig_names = NULL, ic.scale=TRUE,
max_pos = 20, flanking_bases=1,
yscale_change = TRUE, xaxis=TRUE,
yaxis=TRUE, xlab = " ", xaxis_fontsize=5,
xlab_fontsize=10, title_aligner = 18,
y_fontsize=10, title_fontsize = 20,
mut_width=2, start=0.0001,
renyi_alpha = 1, pop_names="",
logoport_x = 0.25, logoport_y= 0.50, logoport_width= 0.28, logoport_height= 0.40,
lineport_x = 0.9, lineport_y=0.40, lineport_width=0.32, lineport_height=0.28,
breaklogoport_x = 1.00, breaklogoport_y = 0.40, breaklogoport_width=0.40, breaklogoport_height=0.50,
barport_x = 0.58, barport_y=0.60, barport_width=0.25, barport_height=0.25,
output_width = 1200, output_height = 700)
logo.control <- modifyList(logo.control, logo.control.default)
file.exists(paste0(dir, tail(strsplit(dir, "/")[[1]],1), ".rda"))
message("MutationFeatureFormat file present: skipping the signature aggregation step")
mff_dat <- get(load(paste0(dir, tail(strsplit(dir, "/")[[1]],1), ".rda")))
index <- grep(paste0(file), rownames(mff_dat))
clubbed_counts <- mff_dat[index, ]
clubbed_counts_norm <- clubbed_counts/ sum(clubbed_counts)
clubbed_counts_norm
clubbed_counts_norm[1:10]
clubbed_counts_norm[1:10]
clubbed_data
clubbed_data[1:5]
sum(clubbed_data)
clubbed_data_norm <- as.vector(clubbed_data)/ sum(clubbed_data)
clubbed_data_norm[1:5]
do.call(damageLogo_five, append(list(theta_pool = clubbed_data_norm, output_dir = output_dir, save_plot = save_plot),
logo.control))
if(is.null(output_dir)){
output_dir <- paste0(getwd(), "/")
}
do.call(damageLogo_five, append(list(theta_pool = clubbed_data_norm, output_dir = output_dir, save_plot = save_plot),
logo.control))
output_dir <- NULL
if(is.null(output_dir)){
output_dir <- paste0(getwd(), "/")
}
do.call(damageLogo_five, append(list(theta_pool = clubbed_data_norm, output_dir = output_dir, save_plot = save_plot),
logo.control))
ssave_plot = FALSE
if(is.null(output_dir)){
output_dir <- paste0(getwd(), "/")
}
do.call(damageLogo_five, append(list(theta_pool = clubbed_data_norm, output_dir = output_dir, save_plot = save_plot),
logo.control))
save_plot = FALSE
if(is.null(output_dir)){
output_dir <- paste0(getwd(), "/")
}
do.call(damageLogo_five, append(list(theta_pool = clubbed_data_norm, output_dir = output_dir, save_plot = save_plot),
logo.control))
source('~/Documents/aRchaic/R/damageLogo_5.R')
if(is.null(output_dir)){
output_dir <- paste0(getwd(), "/")
}
do.call(damageLogo_five, append(list(theta_pool = clubbed_data_norm, output_dir = output_dir, save_plot = save_plot),
logo.control))
do.call(damageLogo_five, append(list(theta_pool = t(clubbed_data_norm), output_dir = output_dir, save_plot = save_plot),
logo.control))
save_plot = TRUE
do.call(damageLogo_five, append(list(theta_pool = t(clubbed_data_norm), output_dir = output_dir, save_plot = save_plot),
logo.control))
source('~/Documents/aRchaic/R/damageLogo_5.R')
source('~/Documents/ancient-damage/R/test_aRchaic_view.R')
dir <- "../data/Tyrolean_Iceman/"
file = "teresa.srt.subsampled.q30.csv"
breaks = c(-1, seq(1,20,1))
flanking_bases =1
logo.control = list()
output_dir <- NULL
source('~/Documents/aRchaic/R/damageLogo_5.R')
do.call(damageLogo_five, append(list(theta_pool = t(clubbed_data_norm), output_dir = output_dir, save_plot = save_plot),
logo.control))
dim(clubbed_data_norm)
length(clubbed_data_norm)
mff_dat <- get(load(paste0(dir, tail(strsplit(dir, "/")[[1]],1), ".rda")))
dim(mff_dat)
index <- grep(paste0(file), rownames(mff_dat))
index
rownames(mff_dat)
paste0(file)
dir <- "../data/Tyrolean_Iceman/"
file = "teresa.srt.subsampled.q30"
breaks = c(-1, seq(1,20,1))
flanking_bases =1
logo.control = list()
output_dir <- NULL
mff_dat <- get(load(paste0(dir, tail(strsplit(dir, "/")[[1]],1), ".rda")))
index <- grep(paste0(file), rownames(mff_dat))
clubbed_counts <- mff_dat[index, ]
dim(clubbed_counts)
index
clubbed_counts_norm <- clubbed_counts/ sum(clubbed_counts)
clubbed_counts_norm[1:5]
dim(t(clubbed_data_norm))
do.call(damageLogo_five, append(list(theta_pool = clubbed_data_norm, output_dir = output_dir, save_plot = save_plot),
logo.control))
theta_pool = clubbed_data_norm
dim(theta_pool)
do.call(damageLogo_five, append(list(theta_pool = matrix(clubbed_data_norm, ncol = 1), output_dir = output_dir, save_plot = save_plot),
logo.control))
theta_pool = matrix(clubbed_data_norm, ncol = 1)
dim(theta_pool)
dim(theta_pool)[2] == 1
do.call(damageLogo_five, append(list(theta_pool = matrix(clubbed_data_norm, ncol = 1), output_dir = output_dir, save_plot = save_plot),
logo.control))
sig_names = NULL
ic.scale=TRUE
max_pos = 20
flanking_bases=1
yscale_change = TRUE
xaxis=TRUE
yaxis=TRUE
xlab = " "
xaxis_fontsize=5
xlab_fontsize=10
title_aligner = 8
y_fontsize=10
title_fontsize = 20
mut_width=2
start=0.0001
renyi_alpha = 1
pop_names=paste0("Cluster ",1:dim(theta_pool)[2])
logoport_x = 0.25
logoport_y= 0.50
logoport_width= 0.28
logoport_height= 0.40
lineport_x = 0.9
lineport_y=0.40
lineport_width=0.32
lineport_height=0.28
breaklogoport_x = 1.00
breaklogoport_y = 0.40
breaklogoport_width=0.40
breaklogoport_height=0.50
barport_x = 0.58
barport_y=0.60
barport_width=0.25
barport_height=0.25
output_dir = NULL
output_width = 1200
output_height = 700
save_plot=TRUE
flag <- 0
if(dim(theta_pool)[2] == 1){
flag = 1
theta_pool <- cbind(theta_pool, theta_pool)
colnames(theta_pool) <- c("sample1", "sample2")
}
signature_set <- rownames(theta_pool)
signature_patterns <- substring(signature_set, 1, 4+2*flanking_bases)
library(dplyr)
theta <- dplyr::tbl_df(data.frame(theta_pool)) %>% dplyr::mutate(sig = signature_patterns) %>% dplyr::group_by(sig) %>% dplyr::summarise_each(funs(sum)) %>% as.data.frame()
rownames(theta) <-  theta[,1]
theta <- theta[,-1]
indices_minus <- grep("_-_", signature_set)
strand_theta <- data.frame("minus" = colSums(theta_pool[indices_minus,]),
"plus" = colSums(theta_pool[-indices_minus,]))
if(flag == 1){
strand_theta <- data.frame("minus" = colSums(matrix(theta_pool[indices_minus,])),
"plus" = colSums(matrix(theta_pool[-indices_minus,])))
strand_theta <- strand_theta/2;
}
breakbase <- substring(signature_set, 8+2*flanking_bases,  8+2*flanking_bases)
theta_break <- dplyr::tbl_df(data.frame(theta_pool)) %>% dplyr::mutate(sig = breakbase) %>% dplyr::group_by(sig) %>% dplyr::summarise_each(funs(sum)) %>% as.data.frame()
rownames(theta_break) <- theta_break[,1]
theta_break <- theta_break[,-1]
theta_break <- theta_break[match(c("A", "C", "G", "T"), rownames(theta_break)),]
breaks_theta <- theta_break
if(is.null(sig_names))
sig_names <- rownames(theta)
prob_mutation <- filter_signatures_only_location(t(theta_pool), max_pos = max_pos, flanking_bases = flanking_bases)
prob_mutation <- t(apply(prob_mutation, 1, function(x) {
y <- x[!is.na(x)];
return(y/sum(y))
}))
max_prob <- max(prob_mutation);
sig_split <- do.call(rbind,
lapply(sig_names,
function(x) strsplit(as.character(x), split="")[[1]][1:(4+2*flanking_bases)]))
ncol_sig <- (4+2*flanking_bases)
if(flanking_bases%%1 != 0){
stop("flanking bases not evenly distributed")
}
sub_pattern <- sapply(1:dim(sig_split)[1],
function(x) paste(sig_split[x,(flanking_bases+1):(flanking_bases+4)], collapse=""))
new_sig_split <- cbind(sig_split[,1:flanking_bases], sub_pattern, sig_split[,((ncol_sig - flanking_bases +1):ncol_sig)])
colnames(new_sig_split) = NULL
prop_patterns_list <- list()
for(l in 1:dim(theta)[2]){
prop_patterns_list[[l]] <- numeric();
for(j in 1:ncol(new_sig_split)){
temp <- tapply(theta[,l], factor(new_sig_split[,j], levels=c("A", "C", "G", "T", "X",
"C->T", "C->A", "C->G",
"T->A", "T->C", "T->G")), sum)
temp[is.na(temp)]=0
prop_patterns_list[[l]] <- cbind(prop_patterns_list[[l]], temp)
}
}
ic <- damage.ic(prop_patterns_list, alpha=renyi_alpha)
data.frame(theta_pool)
theta_break <- dplyr::tbl_df(data.frame(theta_pool)) %>% dplyr::mutate(sig = breakbase) %>% dplyr::group_by(sig) %>% dplyr::summarise_each(funs(sum)) %>% as.data.frame()
breakbase
rownames(theta_pool)
theta
theta_pool
theta_pool = matrix(clubbed_data_norm, ncol = 1)
rownames(theta_pool)
as.matrix(clubbed_data_norm)
dim(as.matrix(clubbed_data_norm))
temp <- matrix(clubbed_data_norm, ncol = 1)
rownames(temp) <- names(clubbed_data_norm)
temp
names(clubbed_data_norm)
clubbed_data_norm <- clubbed_data/ sum(clubbed_data)
names(clubbed_data_norm)
names(clubbed_data)
clubbed_data
colnames(clubbed_data)
colnamnes(clubbed_data_norm)
colnames(clubbed_data_norm)
temp <- matrix(clubbed_data_norm, ncol = 1)
rownames(temp) <- colnames(clubbed_data_norm)
do.call(damageLogo_five, append(list(theta_pool = matrix(clubbed_data_norm, ncol = 1), output_dir = output_dir, save_plot = save_plot),
logo.control))
temp <- as.matrix(clubbed_data_norm)
rownames(temp) <- colnames(clubbed_data_norm)
dim(temp)
dim(clubbed_data_norm)
mff_dat <- get(load(paste0(dir, tail(strsplit(dir, "/")[[1]],1), ".rda")))
index <- grep(paste0(file), rownames(mff_dat))
clubbed_counts <- mff_dat[index, ]
clubbed_counts_norm <- clubbed_counts/ sum(clubbed_counts)
clubbed_counts_norm
temp <- as.matrix(clubbed_counts_norm)
rownames(temp) <- colnames(clubbed_counts_norm)
do.call(damageLogo_five, append(list(theta_pool = matrix(clubbed_counts_norm, ncol = 1), output_dir = output_dir, save_plot = save_plot),
logo.control))
temp
colnames(clubbed_counts_norm)
names(clubbed_counts_norm)
temp <- as.matrix(clubbed_counts_norm)
rownames(temp) <- names(clubbed_counts_norm)
do.call(damageLogo_five, append(list(theta_pool = matrix(clubbed_counts_norm, ncol = 1), output_dir = output_dir, save_plot = save_plot),
logo.control))
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
source('~/Documents/aRchaic/R/filter_signatures_only_location.R')
source('~/Documents/aRchaic.site/R/filter_signatures_only_location.R')
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
library(dplyr)
library(Logolas)
library(plyr)
library(grid)
library(gridBase)
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
library(ggplot2)
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
getwd()
save_plot
save_plot = FALSE
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
par(new= TRUE)
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
temp <- as.matrix(clubbed_counts_norm)
rownames(temp) <- names(clubbed_counts_norm)
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
grid.newpage()
temp <- as.matrix(clubbed_counts_norm)
rownames(temp) <- names(clubbed_counts_norm)
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
output_dir
if(is.null(output_dir)){
output_dir <- paste0(getwd(), "/")
}
output_dir
save_plot = TRUE
do.call(damageLogo_five, append(list(theta_pool = temp, output_dir = output_dir, save_plot = save_plot),
logo.control))
flag <- 0
if(dim(theta_pool)[2] == 1){
flag = 1
theta_pool <- cbind(theta_pool, theta_pool)
colnames(theta_pool) <- c("sample1", "sample2")
}
signature_set <- rownames(theta_pool)
signature_patterns <- substring(signature_set, 1, 4+2*flanking_bases)
library(dplyr)
theta <- dplyr::tbl_df(data.frame(theta_pool)) %>% dplyr::mutate(sig = signature_patterns) %>% dplyr::group_by(sig) %>% dplyr::summarise_each(funs(sum)) %>% as.data.frame()
rownames(theta) <-  theta[,1]
theta <- theta[,-1]
indices_minus <- grep("_-_", signature_set)
strand_theta <- data.frame("minus" = colSums(theta_pool[indices_minus,]),
"plus" = colSums(theta_pool[-indices_minus,]))
if(flag == 1){
strand_theta <- data.frame("minus" = colSums(matrix(theta_pool[indices_minus,])),
"plus" = colSums(matrix(theta_pool[-indices_minus,])))
strand_theta <- strand_theta/2;
}
breakbase <- substring(signature_set, 8+2*flanking_bases,  8+2*flanking_bases)
theta_break <- dplyr::tbl_df(data.frame(theta_pool)) %>% dplyr::mutate(sig = breakbase) %>% dplyr::group_by(sig) %>% dplyr::summarise_each(funs(sum)) %>% as.data.frame()
rownames(theta_break) <- theta_break[,1]
theta_break <- theta_break[,-1]
theta_break <- theta_break[match(c("A", "C", "G", "T"), rownames(theta_break)),]
breaks_theta <- theta_break
if(is.null(sig_names))
sig_names <- rownames(theta)
prob_mutation <- filter_signatures_only_location(t(theta_pool), max_pos = max_pos, flanking_bases = flanking_bases)
prob_mutation <- t(apply(prob_mutation, 1, function(x) {
y <- x[!is.na(x)];
return(y/sum(y))
}))
max_prob <- max(prob_mutation);
sig_split <- do.call(rbind,
lapply(sig_names,
function(x) strsplit(as.character(x), split="")[[1]][1:(4+2*flanking_bases)]))
ncol_sig <- (4+2*flanking_bases)
if(flanking_bases%%1 != 0){
stop("flanking bases not evenly distributed")
}
sub_pattern <- sapply(1:dim(sig_split)[1],
function(x) paste(sig_split[x,(flanking_bases+1):(flanking_bases+4)], collapse=""))
new_sig_split <- cbind(sig_split[,1:flanking_bases], sub_pattern, sig_split[,((ncol_sig - flanking_bases +1):ncol_sig)])
colnames(new_sig_split) = NULL
prop_patterns_list <- list()
for(l in 1:dim(theta)[2]){
prop_patterns_list[[l]] <- numeric();
for(j in 1:ncol(new_sig_split)){
temp <- tapply(theta[,l], factor(new_sig_split[,j], levels=c("A", "C", "G", "T", "X",
"C->T", "C->A", "C->G",
"T->A", "T->C", "T->G")), sum)
temp[is.na(temp)]=0
prop_patterns_list[[l]] <- cbind(prop_patterns_list[[l]], temp)
}
}
ic <- damage.ic(prop_patterns_list, alpha=renyi_alpha)
theta_pool = temp
output_dir = output_dir
save_plot = save_plot
temp
flag <- 0
if(dim(theta_pool)[2] == 1){
flag = 1
theta_pool <- cbind(theta_pool, theta_pool)
colnames(theta_pool) <- c("sample1", "sample2")
}
signature_set <- rownames(theta_pool)
signature_patterns <- substring(signature_set, 1, 4+2*flanking_bases)
library(dplyr)
theta <- dplyr::tbl_df(data.frame(theta_pool)) %>% dplyr::mutate(sig = signature_patterns) %>% dplyr::group_by(sig) %>% dplyr::summarise_each(funs(sum)) %>% as.data.frame()
rownames(theta) <-  theta[,1]
theta <- theta[,-1]
indices_minus <- grep("_-_", signature_set)
strand_theta <- data.frame("minus" = colSums(theta_pool[indices_minus,]),
"plus" = colSums(theta_pool[-indices_minus,]))
if(flag == 1){
strand_theta <- data.frame("minus" = colSums(matrix(theta_pool[indices_minus,])),
"plus" = colSums(matrix(theta_pool[-indices_minus,])))
strand_theta <- strand_theta/2;
}
breakbase <- substring(signature_set, 8+2*flanking_bases,  8+2*flanking_bases)
theta_break <- dplyr::tbl_df(data.frame(theta_pool)) %>% dplyr::mutate(sig = breakbase) %>% dplyr::group_by(sig) %>% dplyr::summarise_each(funs(sum)) %>% as.data.frame()
rownames(theta_break) <- theta_break[,1]
theta_break <- theta_break[,-1]
theta_break <- theta_break[match(c("A", "C", "G", "T"), rownames(theta_break)),]
breaks_theta <- theta_break
if(is.null(sig_names))
sig_names <- rownames(theta)
prob_mutation <- filter_signatures_only_location(t(theta_pool), max_pos = max_pos, flanking_bases = flanking_bases)
prob_mutation <- t(apply(prob_mutation, 1, function(x) {
y <- x[!is.na(x)];
return(y/sum(y))
}))
max_prob <- max(prob_mutation);
sig_split <- do.call(rbind,
lapply(sig_names,
function(x) strsplit(as.character(x), split="")[[1]][1:(4+2*flanking_bases)]))
ncol_sig <- (4+2*flanking_bases)
if(flanking_bases%%1 != 0){
stop("flanking bases not evenly distributed")
}
sub_pattern <- sapply(1:dim(sig_split)[1],
function(x) paste(sig_split[x,(flanking_bases+1):(flanking_bases+4)], collapse=""))
new_sig_split <- cbind(sig_split[,1:flanking_bases], sub_pattern, sig_split[,((ncol_sig - flanking_bases +1):ncol_sig)])
colnames(new_sig_split) = NULL
prop_patterns_list <- list()
for(l in 1:dim(theta)[2]){
prop_patterns_list[[l]] <- numeric();
for(j in 1:ncol(new_sig_split)){
temp <- tapply(theta[,l], factor(new_sig_split[,j], levels=c("A", "C", "G", "T", "X",
"C->T", "C->A", "C->G",
"T->A", "T->C", "T->G")), sum)
temp[is.na(temp)]=0
prop_patterns_list[[l]] <- cbind(prop_patterns_list[[l]], temp)
}
}
ic <- damage.ic(prop_patterns_list, alpha=renyi_alpha)
ic
grob_list <- list()
l <- 1
png(paste0(output_dir, "logo_", l, ".png"), width=output_width, height = output_height)
damageLogo.pos.str.skeleton(pwm = prop_patterns_list[[l]],
probs = prob_mutation[l,],
breaks_theta_vec = breaks_theta[,l, drop=FALSE],
strand_theta_vec = strand_theta[l,],
ic = ic[,l],
max_pos = max_pos,
max_prob = max_prob,
ic.scale = ic.scale,
yscale_change = yscale_change,
xlab = xlab,
xaxis=xaxis,
yaxis=yaxis,
xaxis_fontsize=xaxis_fontsize,
xlab_fontsize=xlab_fontsize,
title_aligner = title_aligner,
y_fontsize=y_fontsize,
title_fontsize = title_fontsize,
mut_width=mut_width,
start=start,
pop_name = pop_names[l],
logoport_x = logoport_x,
logoport_y= logoport_y,
logoport_width= logoport_width,
logoport_height= logoport_height,
lineport_x = lineport_x,
lineport_y= lineport_y,
lineport_width=lineport_width,
lineport_height=lineport_height,
breaklogoport_x = breaklogoport_x,
breaklogoport_y = breaklogoport_y,
breaklogoport_width=breaklogoport_width,
breaklogoport_height=breaklogoport_height,
barport_x = barport_x,
barport_y = barport_y,
barport_width = barport_width,
barport_height = barport_height)
dev.off()
damageLogo.pos.str.skeleton(pwm = prop_patterns_list[[l]],
probs = prob_mutation[l,],
breaks_theta_vec = breaks_theta[,l, drop=FALSE],
strand_theta_vec = strand_theta[l,],
ic = ic[,l],
max_pos = max_pos,
max_prob = max_prob,
ic.scale = ic.scale,
yscale_change = yscale_change,
xlab = xlab,
xaxis=xaxis,
yaxis=yaxis,
xaxis_fontsize=xaxis_fontsize,
xlab_fontsize=xlab_fontsize,
title_aligner = title_aligner,
y_fontsize=y_fontsize,
title_fontsize = title_fontsize,
mut_width=mut_width,
start=start,
pop_name = pop_names[l],
logoport_x = logoport_x,
logoport_y= logoport_y,
logoport_width= logoport_width,
logoport_height= logoport_height,
lineport_x = lineport_x,
lineport_y= lineport_y,
lineport_width=lineport_width,
lineport_height=lineport_height,
breaklogoport_x = breaklogoport_x,
breaklogoport_y = breaklogoport_y,
breaklogoport_width=breaklogoport_width,
breaklogoport_height=breaklogoport_height,
barport_x = barport_x,
barport_y = barport_y,
barport_width = barport_width,
barport_height = barport_height)
do.call(damageLogo_five, append(list(theta_pool = temp,
output_dir = output_dir,
save_plot = save_plot),
logo.control))
