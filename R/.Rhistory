graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 2))
dim(omega)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(5, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
## convert the bases to numbers
site_left_2 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,1])
site_left_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,2])
site_right_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,7])
site_right_2 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,8])
sub_pattern <- sapply(1:dim(sig_split)[1], function(x) paste(sig_split[x,3:6], collapse=""))
from = c("C->A", "C->G", "C->T", "T->A", "T->C", "T->G")
to = c(1,2,3,4,5,6)
## pattern of bases matrix
substitute <- gsub2(from, to, sub_pattern)
mutation_features <- sapply(1:dim(sig_split)[1],
function(m) paste0(substitute[m], ",", site_left_2[m], ",", site_left_1[m], ",", site_right_1[m], ",", site_right_2[m]))
## matrix of mutation or damage features
mut_features_mat <- data.frame(cbind(substitute, site_left_2, site_left_1, site_right_1, site_right_2))
rownames(mut_features_mat) <- mutation_features
colnames(mut_features_mat)=NULL
mut_features_mat <- as.matrix(apply(mut_features_mat, c(1,2), function(x) as.numeric(x)))
sub_pattern_noCtoT <- sub_pattern[-indices];
mut_features_mat_noCtoT <- mut_features_mat[-indices,];
indices
theta <- topics_clus$clust_2$theta;
omega <- topics_clus$clust_2$omega
library(pmsignature)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat_noCtoT[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
Param <- new(Class = "EstimatedParameters",
type = type,
flankingBasesNum = flankingBasesNum,
transcriptionDirection = trDir,
possibleFeatures = as.integer(fdim),
sampleList = sample_names,
signatureNum = as.integer(K),
isBackGround = isBG,
signatureFeatureDistribution = F,
sampleSignatureDistribution = omega,
loglikelihood = -100000)
graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 2))
theta <- topics_clus$clust_3$theta;
omega <- topics_clus$clust_3$omega
library(pmsignature)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat_noCtoT[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
Param <- new(Class = "EstimatedParameters",
type = type,
flankingBasesNum = flankingBasesNum,
transcriptionDirection = trDir,
possibleFeatures = as.integer(fdim),
sampleList = sample_names,
signatureNum = as.integer(K),
isBackGround = isBG,
signatureFeatureDistribution = F,
sampleSignatureDistribution = omega,
loglikelihood = -100000)
graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
graphList[[3]] <- visPMSignature(Param, 3)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 3))
theta <- topics_clus$clust_4$theta;
omega <- topics_clus$clust_4$omega
library(pmsignature)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat_noCtoT[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
Param <- new(Class = "EstimatedParameters",
type = type,
flankingBasesNum = flankingBasesNum,
transcriptionDirection = trDir,
possibleFeatures = as.integer(fdim),
sampleList = sample_names,
signatureNum = as.integer(K),
isBackGround = isBG,
signatureFeatureDistribution = F,
sampleSignatureDistribution = omega,
loglikelihood = -100000)
graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
graphList[[3]] <- visPMSignature(Param, 3)
graphList[[4]] <- visPMSignature(Param, 4)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 4))
normalize <- function(x) return(x/sum(x))
theta <- topics_clus$clust_4$theta;
omega <- topics_clus$clust_4$omega
sample_names <- rownames(signature_counts_noCtoT)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
index_sub <- c("C->A", "C->G", "T->A", "T->C", "T->G")
visDMSignature (theta,
index_sub,
pattern=sub_pattern,
mutation_features_matrix = mut_features_mat_noCtoT,
sample_names,
flankingBasesNum=as.integer(numBases),
trDir,
fdim,
title_size=10,
panel_title_size=10,
panel_title_font=4,
layout=c(6,1))
normalize <- function(x) return(x/sum(x))
theta <- topics_clus$clust_4$theta;
omega <- topics_clus$clust_4$omega
sample_names <- rownames(signature_counts_noCtoT)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
index_sub <- c("C->A", "C->G", "T->A", "T->C", "T->G")
visDMSignature (theta,
index_sub,
pattern=sub_pattern_noCtoT,
mutation_features_matrix = mut_features_mat_noCtoT,
sample_names,
flankingBasesNum=as.integer(numBases),
trDir,
fdim,
title_size=10,
panel_title_size=10,
panel_title_font=4,
layout=c(5,1))
topics_clus <- get(load("../rda/topics_clus_Lindo_ancient_2_to_4.rda"))
## create a list of damage or mutation signatures
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
## convert the bases to numbers
site_left_2 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,1])
site_left_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,2])
site_right_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,7])
site_right_2 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,8])
sub_pattern <- sapply(1:dim(sig_split)[1], function(x) paste(sig_split[x,3:6], collapse=""))
from = c("C->A", "C->G", "C->T", "T->A", "T->C", "T->G")
to = c(1,2,3,4,5,6)
## pattern of bases matrix
substitute <- gsub2(from, to, sub_pattern)
mutation_features <- sapply(1:dim(sig_split)[1],
function(m) paste0(substitute[m], ",", site_left_2[m], ",", site_left_1[m], ",", site_right_1[m], ",", site_right_2[m]))
## matrix of mutation or damage features
mut_features_mat <- data.frame(cbind(substitute, site_left_2, site_left_1, site_right_1, site_right_2))
rownames(mut_features_mat) <- mutation_features
colnames(mut_features_mat)=NULL
mut_features_mat <- as.matrix(apply(mut_features_mat, c(1,2), function(x) as.numeric(x)))
theta <- topics_clus$clust_2$theta;
omega <- topics_clus$clust_2$omega
library(pmsignature)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
Param <- new(Class = "EstimatedParameters",
type = type,
flankingBasesNum = flankingBasesNum,
transcriptionDirection = trDir,
possibleFeatures = as.integer(fdim),
sampleList = sample_names,
signatureNum = as.integer(K),
isBackGround = isBG,
signatureFeatureDistribution = F,
sampleSignatureDistribution = omega,
loglikelihood = -100000)
graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 2))
signature_counts <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
signature_counts <- signature_counts[1:25,]
signature_set <- colnames(signature_counts)
## dimensions of data: nrows=number of samples
## ncols = number of damage/mutation signatures
print(dim(signature_counts))
## the top corner of the counts matrix
signature_counts[1:5,1:5]
## create a list of damage or mutation signatures
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
## convert the bases to numbers
site_left_2 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,1])
site_left_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,2])
site_right_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,7])
site_right_2 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split[,8])
sub_pattern <- sapply(1:dim(sig_split)[1], function(x) paste(sig_split[x,3:6], collapse=""))
from = c("C->A", "C->G", "C->T", "T->A", "T->C", "T->G")
to = c(1,2,3,4,5,6)
## pattern of bases matrix
substitute <- gsub2(from, to, sub_pattern)
mutation_features <- sapply(1:dim(sig_split)[1],
function(m) paste0(substitute[m], ",", site_left_2[m], ",", site_left_1[m], ",", site_right_1[m], ",", site_right_2[m]))
## matrix of mutation or damage features
mut_features_mat <- data.frame(cbind(substitute, site_left_2, site_left_1, site_right_1, site_right_2))
rownames(mut_features_mat) <- mutation_features
colnames(mut_features_mat)=NULL
mut_features_mat <- as.matrix(apply(mut_features_mat, c(1,2), function(x) as.numeric(x)))
theta <- topics_clus$clust_2$theta;
omega <- topics_clus$clust_2$omega
library(pmsignature)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
Param <- new(Class = "EstimatedParameters",
type = type,
flankingBasesNum = flankingBasesNum,
transcriptionDirection = trDir,
possibleFeatures = as.integer(fdim),
sampleList = sample_names,
signatureNum = as.integer(K),
isBackGround = isBG,
signatureFeatureDistribution = F,
sampleSignatureDistribution = omega,
loglikelihood = -100000)
graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 2))
theta <- topics_clus$clust_3$theta;
omega <- topics_clus$clust_3$omega
library(pmsignature)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
Param <- new(Class = "EstimatedParameters",
type = type,
flankingBasesNum = flankingBasesNum,
transcriptionDirection = trDir,
possibleFeatures = as.integer(fdim),
sampleList = sample_names,
signatureNum = as.integer(K),
isBackGround = isBG,
signatureFeatureDistribution = F,
sampleSignatureDistribution = omega,
loglikelihood = -100000)
graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
graphList[[3]] <- visPMSignature(Param, 3)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 3))
theta <- topics_clus$clust_4$theta;
omega <- topics_clus$clust_4$omega
library(pmsignature)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
sample_names <- rownames(signature_counts)
K <- dim(omega)[2]
F <- array(0, c(K, length(fdim), max(fdim)))
for(k in 1:K){
for(kk in 1:length(fdim)){
temp <- tapply(theta[,k], mut_features_mat[,kk], sum)
F[k,kk,as.numeric(names(temp))] <- as.numeric(temp)
}
}
Param <- new(Class = "EstimatedParameters",
type = type,
flankingBasesNum = flankingBasesNum,
transcriptionDirection = trDir,
possibleFeatures = as.integer(fdim),
sampleList = sample_names,
signatureNum = as.integer(K),
isBackGround = isBG,
signatureFeatureDistribution = F,
sampleSignatureDistribution = omega,
loglikelihood = -100000)
graphList <- list(mode="vector")
graphList[[1]] <- visPMSignature(Param, 1)
graphList[[2]] <- visPMSignature(Param, 2)
graphList[[3]] <- visPMSignature(Param, 3)
graphList[[4]] <- visPMSignature(Param, 4)
library(grid)
library(gridExtra)
do.call("grid.arrange",
args = list(grobs=graphList,
ncol = 1,
nrow = 4))
normalize <- function(x) return(x/sum(x))
theta <- topics_clus$clust_4$theta;
omega <- topics_clus$clust_4$omega
sample_names <- rownames(signature_counts)
isBG <- TRUE
numBases <- 5
type <- "independent"
flankingBasesNum = as.integer(numBases)
trDir <- FALSE
fdim <- c(6, rep(4, numBases - 1), rep(2, as.integer(trDir)))
index_sub <- c("C->T", "C->A", "C->G", "T->A", "T->C", "T->G")
visDMSignature (theta,
index_sub,
pattern=sub_pattern,
mutation_features_matrix = mut_features_mat,
sample_names,
flankingBasesNum=as.integer(numBases),
trDir,
fdim,
title_size=10,
panel_title_size=10,
panel_title_font=4,
layout=c(6,1))
setwd("~/")
setwd("~/Documents/ancient-damage/R")
signature_counts_2 <- get(load("../summary_data/153-ancient-signature-counts-clubbed.rda"))
signature_counts_1 <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
signature_counts <- rbind(signature_counts_1, signature_counts_2)
signature_set <- colnames(signature_counts)
sig_T_AAA_counts <- rowSums(signature_counts[,grep("T->AAA", colnames(signature_counts))])
sig_counts <- rowSums(signature_counts)
T_AAA_mat <- cbind(sig_T_AAA_counts, sig_counts - sig_T_AAA_counts);
T_AAA_mat <- t(apply(T_AAA_mat, 1, normalize))
colnames(T_AAA_mat) <- c("T_AAA", "Other")
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(T_AAA_mat))),
tissue_label = factor(c(rep("Ancient",25), rep("Modern",25)))
)
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(T_AAA_mat))),
tissue_label = factor(c(rep("Ancient_Lindo",25),
rep("Modern_Lindo",25),
rep("I",length(I_labels)), rep("RISE",length(RISE_labels))))
)
signature_counts_2 <- get(load("../summary_data/153-ancient-signature-counts-clubbed.rda"))
signature_counts_1 <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
signature_counts <- rbind(signature_counts_1, signature_counts_2)
signature_set <- colnames(signature_counts)
RISE_labels <- grep("RISE", rownames(signature_counts_2))
I_labels <- setdiff(1:152,RISE_labels)
sig_T_AAA_counts <- rowSums(signature_counts[,grep("T->AAA", colnames(signature_counts))])
sig_counts <- rowSums(signature_counts)
T_AAA_mat <- cbind(sig_T_AAA_counts, sig_counts - sig_T_AAA_counts);
T_AAA_mat <- t(apply(T_AAA_mat, 1, normalize))
colnames(T_AAA_mat) <- c("T_AAA", "Other")
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(T_AAA_mat))),
tissue_label = factor(c(rep("Ancient_Lindo",25),
rep("Modern_Lindo",25),
rep("I",length(I_labels)), rep("RISE",length(RISE_labels))))
)
annotation
barplot(sig_T_AAA_counts/sig_counts, main="Proportion of T->AAA (each sample)")
T_AAA_frame <- data.frme("y"=sig_T_AAA_counts/sig_counts,
"labels"=annotation$tissue_label)
qplot(y, data=T_AAA_frame, colour=labels)
T_AAA_frame <- data.frame("y"=sig_T_AAA_counts/sig_counts,
"labels"=annotation$tissue_label)
qplot(y, data=T_AAA_frame, colour=labels)
sig_T_AAA_counts/sig_counts
T_AAA_frame <- data.frame("y"=sig_T_AAA_counts,
"labels"=annotation$tissue_label)
qplot(y, data=T_AAA_frame, colour=labels)
qplot(sig_T_AAA_counts/sig_counts, main="Proportion of T->AAA (each sample)")
plot(sig_T_AAA_counts/sig_counts, main="Proportion of T->AAA (each sample)")
plot(sig_T_AAA_counts/sig_counts, main="Proportion of T->AAA (each sample)",
col=annotation$tissue_label)
plot(sig_T_AAA_counts, main="Proportion of T->AAA (each sample)",
col=annotation$tissue_label, pch=20, ylab="proportion of T->AAA")
legend("topright", legend=c("Lindo_ancient", "Lindo_modern", "IO", "RISE"),
fill=unique(annotation$tissue_label))
plot(sig_T_AAA_counts, main="Proportion of T->AAA (each sample)",
col=annotation$tissue_label, pch=20, ylab="number of T->AAA")
legend("topright", legend=c("Lindo_ancient", "Lindo_modern", "IO", "RISE"),
fill=unique(annotation$tissue_label))
plot(sig_T_AAA_counts, main="Number of T->AAA (each sample)",
col=annotation$tissue_label, pch=20, ylab="no. of T->AAA")
legend("topright", legend=c("Lindo_ancient", "Lindo_modern", "IO", "RISE"),
fill=unique(annotation$tissue_label))
plot(sig_T_AAA_counts/sig_counts, main="Prop of T->AAA (each sample)",
col=annotation$tissue_label, pch=20, ylab="prop. of T->AAA")
legend("topright", legend=c("Lindo_ancient", "Lindo_modern", "IO", "RISE"),
fill=unique(annotation$tissue_label))
plot(sig_T_AAA_counts, main="Number of T->AAA (each sample)",
col=annotation$tissue_label, pch=20, ylab="no. of T->AAA")
legend("topright", legend=c("Lindo_ancient", "Lindo_modern", "IO", "RISE"),
fill=unique(annotation$tissue_label))
plot(sig_T_AAA_counts/sig_counts, main="Prop of T->AAA (each sample)",
col=annotation$tissue_label, pch=20, ylab="prop. of T->AAA")
legend("topright", legend=c("Lindo_ancient", "Lindo_modern", "IO", "RISE"),
fill=unique(annotation$tissue_label))
