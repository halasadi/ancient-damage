signature_set_filter <- colnames(signature_counts_filter_C_to_T)
pr <- prcomp(t(limma::voom(t(signature_counts_filter_C_to_T))$E))
pc_data_frame_filt <- data.frame("PC"=pr$x,
"labels"=c(rep("Ancient",25),
rep("Modern",25)))
qplot(PC.PC1, PC.PC2,
data=pc_data_frame_filt,
colour=labels)
qplot(PC.PC2, PC.PC3,
data=pc_data_frame_filt,
colour=labels)
plot(pr$center)
sort(pr$rotation[,1], decreasing=TRUE)[1:5]
sort(pr$rotation[,2], decreasing=TRUE)[1:5]
########   CountClust performance (with C-> T and G -> A) ########################
library(CountClust)
topics_clus <- FitGoM(signature_counts,
tol=0.1,
K=2:4)
save(topics_clus, file="../rda/CountClust_output_Lindo2016_with_C_to_T.rda")
topics_clus <- get(load("../rda/CountClust_output_Lindo2016_with_C_to_T.rda"));
##############  clusters :  2#######################
omega <- topics_clus$clust_2$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(pc_data_frame$labels)
)
rownames(omega) <- annotation$sample_id;
StructureGGplot(omega = omega,
annotation = annotation,
palette = rev(RColorBrewer::brewer.pal(8, "Accent")),
yaxis_label = "Development Phase",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],", no C -> T / G -> A"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
theta <- topics_clus$clust_2$theta;
sort(theta[,1])[1:10]
sort(theta[,2])[1:10]
apply(ExtractTopFeatures(theta, top_features = 10, method="poisson", options="min"), c(1,2), function(x) signature_set[x])
################## clusters: 3  ########################
omega <- topics_clus$clust_3$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(pc_data_frame$labels)
)
rownames(omega) <- annotation$sample_id;
StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Development Phase",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],", no C -> T / G -> A"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
theta <- topics_clus$clust_3$theta;
sort(theta[,1])[1:10]
sort(theta[,2])[1:10]
sort(theta[,3])[1:10]
apply(ExtractTopFeatures(theta, top_features = 10, method="poisson", options="min"), c(1,2), function(x) signature_set[x])
###########  clusters: 4  ###########################
omega <- topics_clus$clust_4$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(pc_data_frame$labels)
)
rownames(omega) <- annotation$sample_id;
StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Development Phase",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],", no C -> T / G -> A"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
theta <- topics_clus$clust_4$theta;
sort(theta[,1])[1:10]
sort(theta[,2])[1:10]
sort(theta[,3])[1:10]
sort(theta[,4])[1:10]
apply(ExtractTopFeatures(theta, top_features = 10, method="poisson", options="min"), c(1,2), function(x) signature_set[x])
########   CountClust performance (no C-> T and G -> A) ########################
library(CountClust)
topics_clus <- FitGoM(signature_counts_filter_C_to_T,
tol=0.1,
K=2:4)
save(topics_clus, file="../rda/CountClust_output_Lindo2016_without_C_to_T.rda")
topics_clus <- get(load("../rda/CountClust_output_Lindo2016_without_C_to_T.rda"))
##################  clusters:  2 ###################################
omega <- topics_clus$clust_2$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(pc_data_frame$labels)
)
rownames(omega) <- annotation$sample_id;
StructureGGplot(omega = omega,
annotation = annotation,
palette = rev(RColorBrewer::brewer.pal(8, "Accent")),
yaxis_label = "Development Phase",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],", no C -> T / G -> A"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
theta <- topics_clus$clust_2$theta;
sort(theta[,1])[1:10]
sort(theta[,2])[1:10]
apply(ExtractTopFeatures(theta, top_features = 10, method="poisson", options="min"), c(1,2), function(x) signature_set_filter[x])
ExtractTopFeatures <- function(theta,
top_features = 10,
method = c("poisson","bernoulli"),
options=c("min", "max"))
{
if (is.null(method)) {
warning("method is not specified! Default method is Poisson distribution.")
method <- "poisson"
}
if(method=="poisson") {
KL_score <- lapply(1:dim(theta)[2], function(n) {
out <- t(apply(theta, 1, function(x){
y=x[n] *log(x[n]/x) + x - x[n];
return(y)
}));
return(out)
})
}
if(method=="bernoulli"){
KL_score <- lapply(1:dim(theta)[2], function(n) {
out <- t(apply(theta, 1, function(x){
y=x[n] *log(x[n]/x) + (1 - x[n])*log((1-x[n])/(1-x));
return(y)
}));
return(out)
})
}
indices_mat=matrix(0,dim(theta)[2],top_features);
if(dim(theta)[2]==2){
for(k in 1:dim(theta)[2])
{
temp_mat <- KL_score[[k]][,-k];
if(options=="min"){
vec <- apply(as.matrix(temp_mat), 1, function(x) min(x))}
if(options=="max"){
vec <- apply(as.matrix(temp_mat), 1, function(x) max(x))}
#vec <- temp_mat;
ordered_kl <- order(vec, decreasing = TRUE);
counter <- 1
flag <- counter
while(flag <= top_features)
{
if(which.max(theta[ordered_kl[counter],])==k){
indices_mat[k, flag] <- ordered_kl[counter];
flag <- flag + 1;
counter <- counter + 1;}
else{
counter <- counter + 1;
}
}
}
} else{
for(k in 1:dim(theta)[2])
{
temp_mat <- KL_score[[k]][,-k];
if(options=="min"){
vec <- apply(temp_mat, 1, function(x) min(x))}
if(options=="max"){
vec <- apply(temp_mat, 1, function(x) max(x))}
ordered_kl <- order(vec, decreasing = TRUE);
counter <- 1
flag <- counter
while(flag <= top_features)
{
if(counter > dim(theta)[1]){
indices_mat[k,(flag:top_features)]=NA;
break
}
if(which.max(theta[ordered_kl[counter],])==k){
indices_mat[k, flag] <- ordered_kl[counter];
flag <- flag + 1;
counter <- counter + 1;
} else {
counter <- counter + 1;
}
}
}
}
return(indices_mat);
}
apply(ExtractTopFeatures(theta, top_features = 10, method="poisson", options="min"), c(1,2), function(x) signature_set_filter[x])
signature_counts <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
sig_split_red <- sig_split[,3:6];
substitute_sig <- sapply(1:dim(sig_split_red)[1], function(x) paste0(sig_split_red[x,], collapse=""))
normalize <- function(x) return(x/sum(x))
prop_substitute_sig <- do.call(rbind,
lapply(1:dim(signature_counts)[1], function(x)
normalize(tapply(signature_counts[x,], substitute_sig, sum))))
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(prop_substitute_sig))),
tissue_label = factor(c(rep("Ancient",25), rep("Modern",25)))
)
rownames(prop_substitute_sig) <- annotation$sample_id;
StructureGGplot(omega = prop_substitute_sig,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Development Phase",
order_sample = FALSE,
figure_title = paste0("StructurePlot: 6 substituion patterns (with C -> T)"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
##  Now we remove the C -> T substitutions
prop_substitute_sig_filtered <- prop_substitute_sig[,-3]
prop_substitute_sig_filtered_norm <- t(apply(prop_substitute_sig_filtered, 1, normalize))
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(prop_substitute_sig_filtered_norm))),
tissue_label = factor(c(rep("Ancient",25), rep("Modern",25)))
)
rownames(prop_substitute_sig_filtered_norm) <- annotation$sample_id;
StructureGGplot(omega = prop_substitute_sig_filtered_norm,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Development Phase",
order_sample = FALSE,
figure_title = paste0("StructurePlot: 5 substituion patterns (without C -> T)"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
######  T -> AAA pattern counts ##########################
sig_T_AAA_counts <- rowSums(signature_counts[,grep("T->AAA", colnames(signature_counts))])
sig_counts <- rowSums(signature_counts)
T_AAA_mat <- cbind(sig_T_AAA_counts, sig_counts - sig_T_AAA_counts);
T_AAA_mat <- t(apply(T_AAA_mat, 1, normalize))
colnames(T_AAA_mat) <- c("T_AAA", "Other")
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(T_AAA_mat))),
tissue_label = factor(c(rep("Ancient",25), rep("Modern",25)))
)
rownames(T_AAA_mat) <- annotation$sample_id;
barplot(sig_T_AAA_counts/sig_counts, main="Proportion of T->AAA (each sample)")
signature_counts <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
sig_split_red <- sig_split[,3:6];
substitute_sig <- sapply(1:dim(sig_split_red)[1], function(x) paste0(sig_split_red[x,], collapse=""))
normalize <- function(x) return(x/sum(x))
prop_substitute_sig <- do.call(rbind,
lapply(1:dim(signature_counts)[1], function(x)
normalize(tapply(signature_counts[x,], substitute_sig, sum))))
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(prop_substitute_sig))),
tissue_label = factor(c(rep("Ancient",25), rep("Modern",25)))
)
rownames(prop_substitute_sig) <- annotation$sample_id;
StructureGGplot(omega = prop_substitute_sig,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Development Phase",
order_sample = FALSE,
figure_title = paste0("StructurePlot: 6 substituion patterns (with C -> T)"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
signature_counts <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
signature_set <- colnames(signature_counts)
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
signature_counts_noCtoT <- signature_counts[,-indices];
signature_set_noCtoT <- signature_set[-indices];
sig_split_noCtoT <- sig_split[-indices,];
site_left_2 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split_noCtoT[,1])
site_left_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split_noCtoT[,2])
site_right_1 <- gsub2(c("A","C","G","T"), c(1,2,3,4), x=sig_split_noCtoT[,7])
signature_counts <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
signature_set <- colnames(signature_counts)
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
###  Visulaization of topic model on damage data
signature_counts <- get(load("../summary_data/signature-counts-clubbed-Lindo2016.rda"))
signature_set <- colnames(signature_counts)
sig_split <- do.call(rbind, lapply(colnames(signature_counts), function(x) strsplit(as.character(x), split="")[[1]]))
signature_counts_noCtoT <- signature_counts[,-indices];
signature_set_noCtoT <- signature_set[-indices];
sig_split_noCtoT <- sig_split[-indices,];
files <- list.files("../csv/")
files
i=1
data <- read.csv(paste0("../csv/",files[i]), header=FALSE)
dim(data)
data[,1]
signature_counts_ancient[[num]] <- data[,2];
num=i
signature_counts_ancient[[num]] <- data[,2];
signature_modern <- vector(mode="list")
signature_ancient <- vector(mode="list")
signature_counts_modern <- vector(mode="list")
signature_counts_ancient <- vector(mode="list")
signature_ancient[[num]] <- as.character(data[,1]);
length(26:50)
length(1:25)
signature_modern <- vector(mode="list")
signature_ancient <- vector(mode="list")
signature_counts_modern <- vector(mode="list")
signature_counts_ancient <- vector(mode="list")
for(num in 1:25){
data <- read.csv(paste0("../csv/",files[num]), header=FALSE)
signature_counts_ancient[[num]] <- data[,2];
signature_ancient[[num]] <- as.character(data[,1]);
}
for(num in 26:50){
data <- read.csv(paste0("../csv/", files[num]), header=FALSE)
signature_counts_modern[[num]] <- data[,2];
signature_modern[[num]] <- as.character(data[,1]);
}
merged_signature_ancient <- signature_ancient[[1]]
merged_signature_modern <- signature_modern[[1]]
for(num in 2:length(ancient_files)){
merged_signature_ancient <- union(merged_signature_ancient, signature_ancient[[num]])
}
merged_signature_ancient <- signature_ancient[[1]]
merged_signature_modern <- signature_modern[[1]]
for(num in 2:25){
merged_signature_ancient <- union(merged_signature_ancient, signature_ancient[[num]])
}
for(num in 2:25){
merged_signature_modern <- union(merged_signature_modern, signature_modern[[num]])
}
merged_signature <- union(merged_signature_modern, merged_signature_ancient)
modern_counts <- matrix(0, 25, length(merged_signature))
ancient_counts <- matrix(0, 25, length(merged_signature))
for(num in 1:25){
modern_counts[num, match(signature_modern[[num]], merged_signature)] <- signature_counts_modern[[num]]
}
for(num in 1:25){
ancient_counts[num, match(signature_ancient[[num]], merged_signature)] <- signature_counts_ancient[[num]]
}
signature_counts_data_pooled <- rbind(ancient_counts, modern_counts)
all_files <- c(ancient_files, modern_files)
all_files_filt <- as.character(sapply(all_files, function(x) strsplit(x, ".csv")[[1]][1]))
all_files_filt <- as.character(sapply(files, function(x) strsplit(x, ".csv")[[1]][1]))
rownames(signature_counts_data_pooled) <- all_files_filt
colnames(signature_counts_data_pooled) <- merged_signature
merged_signature_split <- do.call(rbind, lapply(merged_signature, function(x) strsplit(as.character(x), split="")[[1]]))
dim(merged_signature_split)
merged_signature_split[1,]
indices1 <- which(merged_signature_split[,4]==merged_signature_split[,7])
indices2 <- numeric()
for(m in 1:8){
indices2 <- c(indices2, which(merged_signature_split[,m]=="N"));
}
indices2 <- numeric()
for(m in 1:10){
indices2 <- c(indices2, which(merged_signature_split[,m]=="N"));
}
indices <- union(indices1, indices2)
signature_counts_data_pooled_filtered <- signature_counts_data_pooled[,-indices]
dim(signature_counts_data_pooled_filtered)
save(signature_counts_data_pooled_filtered,
file="../summary_data/signature-counts-Lindo2016-3.rda")
dim(merged_signature_ancient)
dim(merged_signature)
length(merged_signature)
files <- list.files("../csv/")
signature_modern <- vector(mode="list")
signature_ancient <- vector(mode="list")
signature_counts_modern <- vector(mode="list")
signature_counts_ancient <- vector(mode="list")
for(num in 1:25){
data <- read.csv(paste0("../csv/",files[num]), header=FALSE)
signature_counts_ancient[[num]] <- data[,2];
signature_ancient[[num]] <- as.character(data[,1]);
}
for(num in 26:50){
data <- read.csv(paste0("../csv/", files[num]), header=FALSE)
signature_counts_modern[[num]] <- data[,2];
signature_modern[[num]] <- as.character(data[,1]);
}
signature_modern[[1]]
signature_counts_modern[[1]]
signature_counts_ancient[[1]]
num=26
data <- read.csv(paste0("../csv/", files[num]), header=FALSE)
data
files <- list.files("../csv/")
## check how many moderns and how many ancients we have
signature_modern <- vector(mode="list")
signature_ancient <- vector(mode="list")
signature_counts_modern <- vector(mode="list")
signature_counts_ancient <- vector(mode="list")
for(num in 1:25){
data <- read.csv(paste0("../csv/",files[num]), header=FALSE)
signature_counts_ancient[[num]] <- data[,2];
signature_ancient[[num]] <- as.character(data[,1]);
}
for(num in 26:50){
data <- read.csv(paste0("../csv/", files[num]), header=FALSE)
signature_counts_modern[[(num-25)]] <- data[,2];
signature_modern[[(num-25)]] <- as.character(data[,1]);
}
signature_modern <- vector(mode="list")
signature_ancient <- vector(mode="list")
signature_counts_modern <- vector(mode="list")
signature_counts_ancient <- vector(mode="list")
for(num in 1:25){
data <- read.csv(paste0("../csv/",files[num]), header=FALSE)
signature_counts_ancient[[num]] <- data[,2];
signature_ancient[[num]] <- as.character(data[,1]);
}
for(num in 26:50){
data <- read.csv(paste0("../csv/", files[num]), header=FALSE)
signature_counts_modern[[(num-25)]] <- data[,2];
signature_modern[[(num-25)]] <- as.character(data[,1]);
}
signature_modern[[1]]
merged_signature_ancient <- signature_ancient[[1]]
merged_signature_modern <- signature_modern[[1]]
for(num in 2:25){
merged_signature_ancient <- union(merged_signature_ancient, signature_ancient[[num]])
}
for(num in 2:25){
merged_signature_modern <- union(merged_signature_modern, signature_modern[[num]])
}
merged_signature <- union(merged_signature_modern, merged_signature_ancient)
modern_counts <- matrix(0, 25, length(merged_signature))
ancient_counts <- matrix(0, 25, length(merged_signature))
for(num in 1:25){
modern_counts[num, match(signature_modern[[num]], merged_signature)] <- signature_counts_modern[[num]]
}
for(num in 1:25){
ancient_counts[num, match(signature_ancient[[num]], merged_signature)] <- signature_counts_ancient[[num]]
}
signature_counts_data_pooled <- rbind(ancient_counts, modern_counts)
all_files_filt <- as.character(sapply(files, function(x) strsplit(x, ".csv")[[1]][1]))
rownames(signature_counts_data_pooled) <- all_files_filt
colnames(signature_counts_data_pooled) <- merged_signature
merged_signature_split <- do.call(rbind, lapply(merged_signature, function(x) strsplit(as.character(x), split="")[[1]]))
indices1 <- which(merged_signature_split[,4]==merged_signature_split[,7])
indices2 <- numeric()
for(m in 1:10){
indices2 <- c(indices2, which(merged_signature_split[,m]=="N"));
}
indices <- union(indices1, indices2)
signature_counts_data_pooled_filtered <- signature_counts_data_pooled[,-indices]
#sig_split <- do.call(rbind, lapply(colnames(signature_counts_data_pooled_filtered), function(x) strsplit(as.character(x), split="")[[1]]))
# which(temp[,3]==temp[,6])
save(signature_counts_data_pooled_filtered,
file="../summary_data/signature-counts-Lindo2016-3.rda")
save(signature_counts_data_pooled_filtered,
file="../summary_data/signature-counts-Lindo2016-3.rda")
source('~/ancient-damage/R/signature_clubbing-halasadi.R', echo=TRUE)
rm(list=ls())
signature_counts <- get(load("../summary_data/signature-counts-Lindo2016-3.rda"))
signature_set <- colnames(signature_counts)
gsub2 <- function(pattern, replacement, x, ...) {
for(i in 1:length(pattern))
x <- chartr(pattern[i], replacement[i], x, ...)
x
}
source('~/ancient-damage/R/signature_clubbing-halasadi.R', echo=TRUE)
rm(list=ls())
signature_counts <- get(load("../summary_data/signature-counts-Lindo2016-3.rda"))
signature_set <- colnames(signature_counts)
gsub2 <- function(pattern, replacement, x, ...) {
for(i in 1:length(pattern))
x <- chartr(pattern[i], replacement[i], x, ...)
x
}
signatureclub <- function(signature_set){
from <- c('A','T','G','C')
to <- c('t','a','c','g');
signature_set_mod <- array(0, length(signature_set));
for(m in 1:length(signature_set)){
signature_set_mod[m] <- toupper(gsub2(from, to, signature_set[m]))
}
return(signature_set_mod)
}
new_signature_set <- signatureclub(signature_set)
signature_set_split <- do.call(rbind, lapply(signature_set, function(x) strsplit(as.character(x), split="")[[1]]))
signature_set_split[1,]
signature_set_split <- do.call(rbind, lapply(signature_set, function(x) strsplit(as.character(x), split="")[[1]]))
indices1 <-  which(signature_set_split[,4]=="C" & signature_set_split[,7]=="T")
indices2 <-  which(signature_set_split[,4]=="G" & signature_set_split[,7]=="A")
C_to_T_counts <- rowSums(signature_counts[,indices1]);
G_to_A_counts <- rowSums(signature_counts[,indices2]);
par(mar=c(5,4,4,4))
plot(C_to_T_counts, G_to_A_counts, xlab="C_to_T", ylab="G_to_A",
pch=20, cex=1, col="red")
abline(0,1)
indices_G <-  which(signature_set_split[,4]=="G");
indices_A <-  which(signature_set_split[,4]=="A");
indices <- c(indices_G, indices_A);
signature_set_2 <- signature_set
signature_set_2[indices] <- signatureclub(signature_set[indices])
signature_counts_pooled <- do.call(rbind, lapply(1:dim(signature_counts)[1], function(x) tapply(signature_counts[x,], signature_set_2, sum)))
temp_split <- do.call(rbind, lapply(colnames(signature_counts_pooled), function(x) strsplit(as.character(x), split="")[[1]]))
which(temp_split[,4]=="G") ## should be NA
which(temp_split[,4]=="A") ## should be NA
save(signature_counts_pooled, file="../summary_data/signature-counts-clubbed-Lindo2016-3.rda")
