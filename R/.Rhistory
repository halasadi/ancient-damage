beta = 6 ## weight of sparsity penalty term
rho = 0.01
epsilon <- 0.001
autoencoder.object <- autoencode(X.train=data,nl=nl,N.hidden=N.hidden,
unit.type=unit.type,lambda=lambda,beta=beta,rho=rho,epsilon=epsilon,
optim.method="BFGS",max.iterations=max.iterations,
rescale.flag=TRUE,rescaling.offset=0.001)
library(autoencoder)
nl=3 ## number of layers (default is 3: input, hidden, output)
unit.type = "logistic"
N.hidden = 10
max.iterations = 500
lambda = 0.002 ## weight decay parameter
beta = 6 ## weight of sparsity penalty term
rho = 0.01
epsilon <- 0.01
autoencoder.object <- autoencode(X.train=data,nl=nl,N.hidden=N.hidden,
unit.type=unit.type,lambda=lambda,beta=beta,rho=rho,epsilon=epsilon,
optim.method="BFGS",max.iterations=max.iterations,
rescale.flag=TRUE,rescaling.offset=0.001)
autoencoder.object
autoencoder.object$W[[1]]
plot(autoencoder.object$W[[1]])
plot(autoencoder.object$W[[2]])
dim(autoencoder.object$W[[2]])
proj <- autoencoder.object$W[[2]] %*% autoencoder.object$W[[1]]
dim(proj)
image.plot(proj)
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=FALSE)$X.output
dim(X.output)
image.plot(X.output)
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=TRUE)$X.output
image.plot(X.output)
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=FALSE)$X.output
X.output
library(autoencoder)
nl=3 ## number of layers (default is 3: input, hidden, output)
unit.type = "logistic"
N.hidden = 4
max.iterations = 500
lambda = 0.002 ## weight decay parameter
beta = 6 ## weight of sparsity penalty term
rho = 0.01
epsilon <- 0.01
autoencoder.object <- autoencode(X.train=data,nl=nl,N.hidden=N.hidden,
unit.type=unit.type,lambda=lambda,beta=beta,rho=rho,epsilon=epsilon,
optim.method="BFGS",max.iterations=max.iterations,
rescale.flag=TRUE,rescaling.offset=0.001)
plot(autoencoder.object$W[[1]])
plot(autoencoder.object$W[[2]])
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=FALSE)$X.output
image.plot(X.output)
library(autoencoder)
nl=3 ## number of layers (default is 3: input, hidden, output)
unit.type = "logistic"
N.hidden = 4
max.iterations = 500
lambda = 0.002 ## weight decay parameter
beta = 6 ## weight of sparsity penalty term
rho = 0.01
epsilon <- 0.01
autoencoder.object <- autoencode(X.train=data,nl=nl,N.hidden=N.hidden,
unit.type=unit.type,lambda=lambda,beta=beta,rho=rho,epsilon=epsilon,
optim.method="BFGS",max.iterations=max.iterations,
rescale.flag=TRUE,rescaling.offset=0.001)
plot(autoencoder.object$W[[1]])
plot(autoencoder.object$W[[2]])
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=FALSE)$X.output
image.plot(X.output)
library(autoencoder)
nl=3 ## number of layers (default is 3: input, hidden, output)
unit.type = "logistic"
N.hidden = 4
max.iterations = 2000
lambda = 0.002 ## weight decay parameter
beta = 6 ## weight of sparsity penalty term
rho = 0.01
epsilon <- 0.01
autoencoder.object <- autoencode(X.train=data,nl=nl,N.hidden=N.hidden,
unit.type=unit.type,lambda=lambda,beta=beta,rho=rho,epsilon=epsilon,
optim.method="BFGS",max.iterations=max.iterations,
rescale.flag=TRUE,rescaling.offset=0.001)
plot(autoencoder.object$W[[1]])
plot(autoencoder.object$W[[2]])
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=FALSE)$X.output
image.plot(X.output)
library(autoencoder)
nl=3 ## number of layers (default is 3: input, hidden, output)
unit.type = "logistic"
N.hidden = 4
max.iterations = 5000
lambda = 0.002 ## weight decay parameter
beta = 6 ## weight of sparsity penalty term
rho = 0.01
epsilon <- 0.01
autoencoder.object <- autoencode(X.train=data,nl=nl,N.hidden=N.hidden,
unit.type=unit.type,lambda=lambda,beta=beta,rho=rho,epsilon=epsilon,
optim.method="BFGS",max.iterations=max.iterations,
rescale.flag=TRUE,rescaling.offset=0.001)
plot(autoencoder.object$W[[1]])
plot(autoencoder.object$W[[2]])
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=FALSE)$X.output
image.plot(X.output)
library(autoencoder)
nl=3 ## number of layers (default is 3: input, hidden, output)
unit.type = "logistic"
N.hidden = 2
max.iterations = 5000
lambda = 0.002 ## weight decay parameter
beta = 6 ## weight of sparsity penalty term
rho = 0.01
epsilon <- 0.01
autoencoder.object <- autoencode(X.train=data,nl=nl,N.hidden=N.hidden,
unit.type=unit.type,lambda=lambda,beta=beta,rho=rho,epsilon=epsilon,
optim.method="BFGS",max.iterations=max.iterations,
rescale.flag=TRUE,rescaling.offset=0.001)
plot(autoencoder.object$W[[1]])
plot(autoencoder.object$W[[2]])
X.output <- predict(autoencoder.object, X.input=data,
hidden.output=FALSE)$X.output
image.plot(X.output)
data
dim(data)
plot(autoencoder.object$W[[1]])
plot(autoencoder.object$W[[2]])
image.plot(autoencoder.object$W[[2]] %*% autoencoder.object$W[[1]])
cluster1 <- c(rep(0.001, 100), rep(0.02, 400,), rep(0.001, 200))
sum(cluster1)
cluster1 <- c(rep(0.001, 400), rep(0.002, 200,), rep(0.001, 400))
sum(cluster1)
cluster1 <- c(rep(0.001, 400), rep(0.002, 200), rep(0.001, 400))
sum(cluster1)
cluster1 <- c(rep(0.001, 300), rep(0.002, 200), rep(0.001, 300))
sum(cluster1)
plot(cluster2, type="l")
cluster1 <- c(rep(0.001, 300), rep(0.002, 200), rep(0.001, 300))
cluster2 <- c(rep(0.001, 500), rep(0.002, 200), rep(0.001, 100))
cluster3 <- c(rep(0.001, 100), rep(0.002, 200), rep(0.001, 500))
plot(cluster1, type="l")
plot(cluster2, type="l")
plot(cluster3, type="l")
omega <- cbind(seq(0,0.4, length.out=100), seq(0.5, 0.2, length.out=100),
1 - seq(0,0.4, length.out=100) - seq(0.5, 0.2, length.out=100))
dim(omega)
rowSums(omega)
cluster_theta <- cbind(cluster1, cluster2, cluster3);
dim(cluster_theta)
prob_mat <- omega%*%t(cluster_theta)
dim(prob_mat)
rmultinom(100, prob=prob_mat[n,])
rmultinom(1, size=100, prob=prob_mat[n,])
rmultinom(1, n=100, prob=prob_mat[n,])
n <- 1
rmultinom(1, size=100, prob=prob_mat[n,])
counts[n,] <-  sum(rmultinom(1, size=100, prob=prob_mat[n,]))
sum(rmultinom(1, size=100, prob=prob_mat[n,]))
counts <- matrix(0, dim(prob_mat)[1], dim(prob_mat)[2])
for(n in 1:dim(omega)[1]){
counts[n,] <-  rmultinom(1, size=100, prob=prob_mat[n,])
}
dim(counts)
clus <- maptpx::topics(counts, K=3, tol=0.01);
plot(clus$theta[,1])
plot(clus$theta[,1], type="l", col="red")
plot(clus$theta[,2], type="l", col="red")
plot(clus$theta[,3], type="l", col="red")
counts <- matrix(0, dim(prob_mat)[1], dim(prob_mat)[2])
for(n in 1:dim(omega)[1]){
counts[n,] <-  rmultinom(1, size=5000, prob=prob_mat[n,])
}
##########  apply grade of membership models  ################
clus <- maptpx::topics(counts, K=3, tol=0.01);
plot(clus$theta[,1], type="l", col="red")
plot(clus$theta[,2], type="l", col="red")
plot(clus$theta[,3], type="l", col="red")
cluster1 <- c(rep(0.00001, 300), rep(0.002, 200), rep(0.00001, 300))
sum(cluster1)
cluster1 <- c(rep(0.00001, 300), rep((1-0.00002)/200, 200), rep(0.00001, 300))
sum(cluster1)
cluster1 <- c(rep(0.00001, 300), rep((1-0.006)/200, 200), rep(0.00001, 300))
sum(cluster1)
cluster1 <- c(rep(0.00001, 300), rep((1-0.006)/200, 200), rep(0.00001, 300))
cluster2 <- c(rep(0.00001, 500), rep((1-0.006)/200, 200), rep(0.00001, 100))
cluster3 <- c(rep(0.00001, 100), rep((1-0.006)/200, 200), rep(0.00001, 500))
plot(cluster1, type="l")
plot(cluster2, type="l")
plot(cluster3, type="l")
cluster_theta <- cbind(cluster1, cluster2, cluster3);
omega <- cbind(seq(0,0.4, length.out=100), seq(0.5, 0.2, length.out=100),
1 - seq(0,0.4, length.out=100) - seq(0.5, 0.2, length.out=100))
prob_mat <- omega%*%t(cluster_theta)
counts <- matrix(0, dim(prob_mat)[1], dim(prob_mat)[2])
for(n in 1:dim(omega)[1]){
counts[n,] <-  rmultinom(1, size=5000, prob=prob_mat[n,])
}
clus <- maptpx::topics(counts, K=3, tol=0.01);
plot(clus$theta[,1], type="l", col="red")
plot(clus$theta[,2], type="l", col="red")
plot(clus$theta[,3], type="l", col="red")
plot(cluster1, type="l")
plot(cluster2, type="l")
plot(cluster3, type="l")
clus <- maptpx::topics(counts, K=3, tol=0.01);
plot(clus$theta[,1], type="l", col="red")
plot(clus$theta[,2], type="l", col="red")
plot(clus$theta[,3], type="l", col="red")
clus$BF
clus
clus <- maptpx::topics(counts, K=3, tol=0.01);
clus$BF
clus
plot(clus$theta[,1], type="l", col="red")
plot(clus$theta[,2], type="l", col="red")
plot(clus$theta[,3], type="l", col="red")
omega <- cbind(seq(0,0.4, length.out=100), seq(0.9, 0.1, length.out=100),
1 - seq(0,0.4, length.out=100) - seq(0.9, 0.1, length.out=100))
prob_mat <- omega%*%t(cluster_theta)
counts <- matrix(0, dim(prob_mat)[1], dim(prob_mat)[2])
for(n in 1:dim(omega)[1]){
counts[n,] <-  rmultinom(1, size=5000, prob=prob_mat[n,])
}
##########  apply grade of membership models  ################
clus <- maptpx::topics(counts, K=3, tol=0.01);
clus$BF
plot(clus$theta[,1], type="l", col="red")
plot(clus$theta[,2], type="l", col="red")
plot(clus$theta[,3], type="l", col="red")
plot(clus$theta[,2], type="l", col="red")
plot(clus$theta[,1], type="l", col="red")
plot(clus$theta[,1], type="l", col="red")
line(cluster1, type="l", col="blue")
line(cluster1, col="blue")
lines(cluster1, col="blue")
plot(clus$theta[,1], type="l", col="red")
lines(cluster2, col="blue")
plot(clus$theta[,2], type="l", col="red")
lines(cluster1, col="blue")
plot(clus$theta[,3], type="l", col="red")
lines(cluster3, col="blue")
omega <- cbind(seq(0,0.8, length.out=100), seq(0.9, 0.1, length.out=100),
1 - seq(0,0.8, length.out=100) - seq(0.9, 0.1, length.out=100))
prob_mat <- omega%*%t(cluster_theta)
counts <- matrix(0, dim(prob_mat)[1], dim(prob_mat)[2])
for(n in 1:dim(omega)[1]){
counts[n,] <-  rmultinom(1, size=5000, prob=prob_mat[n,])
}
##########  apply grade of membership models  ################
clus <- maptpx::topics(counts, K=3, tol=0.01);
clus$BF
plot(clus$theta[,1], type="l", col="red")
lines(cluster2, col="blue")
plot(clus$theta[,2], type="l", col="red")
lines(cluster1, col="blue")
plot(clus$theta[,3], type="l", col="red")
lines(cluster1, col="blue")
library(smashtpx)
topic_clus <- smash.topics(counts,
K=3, tol = 100,
smash_gap=2,
smash_method = "gaussian",
init.method = "taddy")
install_github("kkdey/smashtpx")
library(devtools)
install_github("kkdey/smashtpx")
library(smashtpx)
topic_clus <- smash.topics(counts,
K=3, tol = 100,
smash_gap=2,
smash_method = "gaussian",
init.method = "taddy")
remove.packages("slam")
install_github("kkdey/smashtpx")
install_github("kkdey/smashtpx", force=TRUE)
library(devtools)
library(smashtpx)
library(slam)
x <- c(23, 23, 45)
background <- c(0.4, 0.2, 0.4)
chisq.test(as.table(x, round(sum(x) * background)))$p.value
rm(list=ls())
x <- c(2, 0, 1)
chisq.test(as.table(x, round(sum(x) * background)))$p.value
setwd("~/Documents/ancient-damage/src")
vcf_patterns_data <- get(load("../data/vcf_moderns/vcf_patterns_prop_across_chr.rda"))
dim(vcf_patterns_data)
head(vcf_patterns_data)
library(dplyr)
tbl1 <- tbl_df(vcf_patterns_data) %>% filter(sig == "AAT->AAA") %>% select(pop, percentage) %>% group_by(pop) %>% summarise(sumprop=sum(percentage))
tbl2 <- tbl_df(vcf_patterns_data) %>% filter(sig == "TTA->TTT") %>% select(pop, percentage) %>% group_by(pop) %>% summarise(sumprop=sum(percentage))
par(mfrow=c(1,2))
tbl1
tbl2
library(readxl)
pops = read.table(file = '../data/vcf_moderns/igsr_samples.tsv', sep = '\t', header = TRUE)
pop_ids <- pops$Sample.name
pop_names <- pops$Population.code
populations <- pop_names[match(tbl1$pop, pop_ids)]
populations <- pop_names[match(tbl1$pop, pop_ids)]
dat1 <- data.frame("pop"=populations, "samp"=tbl1$pop, "count"= tbl1$sumprop, "id"=1:dim(tbl1)[1])
dat2 <- data.frame("pop"=populations, "samp"=tbl2$pop, "count"= tbl2$sumprop, "id"=1:dim(tbl2)[1])
ggplot2::qplot(id, count, main="AAT->AAA", data=dat1, colour = populations)
dat2 <- data.frame("pop"=populations, "samp"=tbl2$pop, "count"= tbl2$sumprop, "id"=1:dim(tbl2)[1])
ggplot2::qplot(id, count, main="TTA->TTT", data=dat2, colour = populations)
thousandg_data <- get(load("../processed_data/1000Gmoderns-counts-table.rda"));
signature_pops_thousandg <- as.character(sapply(rownames(thousandg_data), function(x) strsplit(x, "[.]")[[1]][1]))
pops_sig = as.character(sapply(rownames(thousandg_data), function(x) strsplit(x, "[.]")[[1]][5]))
pops4 = pops[match(signature_pops_thousandg, pops$Sample.name), ];
pop_ids2 <- pops4$Sample.name
pop_names2 <- pops_sig
indices <- which(is.na(match(pops4$Sample.name, tbl1$pop)))
tbl12 = tbl1[which(!is.na(match(pops4$Sample.name, tbl1$pop))),]
tbl22 = tbl2[which(!is.na(match(pops4$Sample.name, tbl2$pop))),]
populations2 <- pop_names2[-indices]
dat12 = data.frame("pop"=populations2, "samp"=tbl12$pop, "count"= tbl12$sumcount, "id"=1:dim(tbl12)[1])
dat22 = data.frame("pop"=populations2, "samp"=tbl22$pop, "count"= tbl22$sumcount, "id"=1:dim(tbl22)[1])
dat12 = data.frame("pop"=populations2, "samp"=tbl12$pop, "count"= tbl12$sumprop, "id"=1:dim(tbl12)[1])
dat22 = data.frame("pop"=populations2, "samp"=tbl22$pop, "count"= tbl22$sumprop, "id"=1:dim(tbl22)[1])
ggplot2::qplot(id, count, main="AAT->AAA", data=dat12, colour = pop)
ggplot2::qplot(id, count, main="TTA->TTT", data=dat22, colour = pop)
setwd("~/Documents/ancient-damage/R")
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-3.rda"))
labs <- c(rep("Gossling", dim(filtered_gossling)[1]), rep("Sherpa", dim(filtered_sherpa)[1]),
rep("Sardinians", dim(filtered_sardinia)[1]))
omega <- out$omega
cols1 <- c("red","blue","darkgoldenrod1","cyan","firebrick", "green",
"hotpink","burlywood","yellow","darkgray","deepskyblue","darkkhaki",
"brown4","darkorchid","magenta","yellow", "azure1","azure4")
rownames(omega) <- 1:dim(omega)[1]
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
library(aRchaic)
gossling_data <- get(load("../processed_data/annagosling2016-counts-table.rda"))
system.time(gossling_data_clubbed <- club_signature_counts(gossling_data))
gossling_data_clubbed <- gossling_data_clubbed[-28,];
names <- rownames(gossling_data_clubbed);
control_indices <- c(grep("EXN", names), grep("Libneg", names), grep("PCRneg", names))
labs <- character();
labs <- rep("ancient", dim(gossling_data_clubbed)[1])
labs[control_indices] <- "controls"
indices <- which(labs == "ancient")
gossling_ancients <- gossling_data_clubbed[indices, ]
sherpa_data <- get(load("../processed_data/sherpa2017.rda"))
sardinia_data <- get(load("../processed_data/sardinia2017.rda"))
pooled_names <- intersect(colnames(sherpa_data), intersect(colnames(sardinia_data), colnames(gossling_ancients)))
filtered_gossling <- gossling_ancients[, match(pooled_names, colnames(gossling_ancients))]
filtered_sherpa <- sherpa_data[, match(pooled_names, colnames(sherpa_data))]
filtered_sardinia <- sardinia_data[, match(pooled_names, colnames(sardinia_data))]
pooled_data <- rbind(filtered_gossling, filtered_sherpa, filtered_sardinia)
setwd("~/Documents/ancient-damage/R")
library(aRchaic)
gossling_data <- get(load("../processed_data/annagosling2016-counts-table.rda"))
system.time(gossling_data_clubbed <- club_signature_counts(gossling_data))
gossling_data_clubbed <- gossling_data_clubbed[-28,];
names <- rownames(gossling_data_clubbed);
control_indices <- c(grep("EXN", names), grep("Libneg", names), grep("PCRneg", names))
labs <- character();
labs <- rep("ancient", dim(gossling_data_clubbed)[1])
labs[control_indices] <- "controls"
indices <- which(labs == "ancient")
gossling_ancients <- gossling_data_clubbed[indices, ]
sherpa_data <- get(load("../processed_data/sherpa2017.rda"))
sardinia_data <- get(load("../processed_data/sardinia2017.rda"))
pooled_names <- intersect(colnames(sherpa_data), intersect(colnames(sardinia_data), colnames(gossling_ancients)))
filtered_gossling <- gossling_ancients[, match(pooled_names, colnames(gossling_ancients))]
filtered_sherpa <- sherpa_data[, match(pooled_names, colnames(sherpa_data))]
filtered_sardinia <- sardinia_data[, match(pooled_names, colnames(sardinia_data))]
pooled_data <- rbind(filtered_gossling, filtered_sherpa, filtered_sardinia)
devtools::install_github("kkdey/aRchaic")
library(aRchaic)
library(aRchaic)
gossling_data <- get(load("../processed_data/annagosling2016-counts-table.rda"))
system.time(gossling_data_clubbed <- club_signature_counts(gossling_data))
gossling_data_clubbed <- gossling_data_clubbed[-28,];
names <- rownames(gossling_data_clubbed);
control_indices <- c(grep("EXN", names), grep("Libneg", names), grep("PCRneg", names))
labs <- character();
labs <- rep("ancient", dim(gossling_data_clubbed)[1])
labs[control_indices] <- "controls"
indices <- which(labs == "ancient")
gossling_ancients <- gossling_data_clubbed[indices, ]
sherpa_data <- get(load("../processed_data/sherpa2017.rda"))
sardinia_data <- get(load("../processed_data/sardinia2017.rda"))
pooled_names <- intersect(colnames(sherpa_data), intersect(colnames(sardinia_data), colnames(gossling_ancients)))
filtered_gossling <- gossling_ancients[, match(pooled_names, colnames(gossling_ancients))]
filtered_sherpa <- sherpa_data[, match(pooled_names, colnames(sherpa_data))]
filtered_sardinia <- sardinia_data[, match(pooled_names, colnames(sardinia_data))]
pooled_data <- rbind(filtered_gossling, filtered_sherpa, filtered_sardinia)
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-3.rda"))
labs <- c(rep("Gossling", dim(filtered_gossling)[1]), rep("Sherpa", dim(filtered_sherpa)[1]),
rep("Sardinians", dim(filtered_sardinia)[1]))
omega <- out$omega
cols1 <- c("red","blue","darkgoldenrod1","cyan","firebrick", "green",
"hotpink","burlywood","yellow","darkgray","deepskyblue","darkkhaki",
"brown4","darkorchid","magenta","yellow", "azure1","azure4")
rownames(omega) <- 1:dim(omega)[1]
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
par(new=TRUE)
damageLogo_pos(out$theta)
damageLogo_pos(out$theta)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-2.rda"))
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-5.rda"))
labs <- c(rep("Gossling", dim(filtered_gossling)[1]), rep("Sherpa", dim(filtered_sherpa)[1]),
rep("Sardinians", dim(filtered_sardinia)[1]))
omega <- out$omega
cols1 <- c("red","blue","darkgoldenrod1","cyan","firebrick", "green",
"hotpink","burlywood","yellow","darkgray","deepskyblue","darkkhaki",
"brown4","darkorchid","magenta","yellow", "azure1","azure4")
rownames(omega) <- 1:dim(omega)[1]
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
damageLogo_pos(out$theta)
damageLogo_pos(out$theta)
damageLogo_pos(out$theta)
par(plt=gridPLT()) # start a 'graphics' plot
par(new=TRUE)
damageLogo_pos(out$theta)
library(grid)
par(plt=gridPLT()) # start a 'graphics' plot
par(new=TRUE)
par(plt=gridPLT()) # start a 'graphics' plot
par(new=TRUE)
library(grid)
par(plt=gridPLT()) # start a 'graphics' plot
par(new=TRUE)
par(mfrow=c(1,1))
par(plt=gridPLT()) # start a 'graphics' plot
par(new=TRUE)
require(gridBase)
install.packages("gridBase")
install.packages("gridBase")
library(gridBase)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
library(aRchaic)
damageLogo_pos(out$theta)
library(gridBase)
library(gridExtra)
library(grid)
library(aRchaic)
damageLogo_pos(out$theta)
damageLogo_pos(out$theta)
