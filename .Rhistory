vertex.shape="square",
vertex.label=NA,
vertex.color=color,
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
cols1 <- c(RColorBrewer::brewer.pal(12, "Paired")[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
maptpx_fit <- maptpx::topics(t(counts_data), K=4, tol=0.0001)
theta <- maptpx_fit$theta;
max_clus <- apply(theta, 1, function(x) which.max(x))
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
cols1 <- c(RColorBrewer::brewer.pal(12, "Paired")[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
maptpx_fit <- maptpx::topics(t(counts_data), K=2, tol=0.0001)
theta <- maptpx_fit$theta;
max_clus <- apply(theta, 1, function(x) which.max(x))
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
library(HimalayanBirdsAbundance)
data("HimalayanBirdsAbundance")
counts_data <- exprs(HimalayanBirdsAbundance)
sample_metadata <- pData(HimalayanBirdsAbundance)
feature_metadata <- featureData(HimalayanBirdsAbundance)
binary_data <- counts_data
binary_data[binary_data > 0]=1
co_occur_mat <- binary_data%*%t(binary_data)
diag(co_occur_mat)=rep(0,dim(co_occur_mat)[1])
co_occur_mat[co_occur_mat<=2]=0
cols1 <- c(RColorBrewer::brewer.pal(12, "Paired")[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
maptpx_fit <- maptpx::topics(t(counts_data), K=2, tol=0.0001)
theta <- maptpx_fit$theta;
max_clus <- apply(theta, 1, function(x) which.max(x))
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
cols1 <- c(RColorBrewer::brewer.pal(12, "Paired")[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
maptpx_fit <- maptpx::topics(t(counts_data), K=4, tol=0.0001)
theta <- maptpx_fit$theta;
max_clus <- apply(theta, 1, function(x) which.max(x))
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
maptpx_fit <- maptpx::topics(t(counts_data), K=5, tol=0.0001)
theta <- maptpx_fit$theta;
max_clus <- apply(theta, 1, function(x) which.max(x))
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
cor_dist <- 1- abs(cor(t(binary_data)));
system.time(mst2 <- ape::mst(cor_dist));
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
mst2
dim(mst2)
dim(cor_dist)
cor_dist*mst2
dim(cor_dist*mst2)
weighted_edge <- cor_dist*mst2;
dim(weighted_edge)
plot(as.vector(weighted_edge),as.vector(path_lengths), pch=20,col="red")
plot(as.vector(cor_dist),as.vector(path_lengths), pch=20,col="red")
max(path_lengths)
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
mst2.graph
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(mst2));
path_lengths <- igraph::shortest.paths(mst2.graph)
max(path_lengths)
path_lengths <- igraph::shortest.paths(mst2.graph)
par(mar=c(10,2,2,4))
weighted_edge <- cor_dist*mst2;
plot(as.vector(cor_dist),as.vector(path_lengths), pch=20,col="red")
morpheco <- read.csv("../external_data/MorphEco.csv");
morph_eco_filt <- morpheco[match(featureNames(feature_metadata),morpheco$Name),];
feature_dist <- matrix(0, dim(morph_eco_filt)[1], dim(morph_eco_filt)[1])
for(i in 1:dim(morph_eco_filt)[1]){
for(j in 1:dim(morph_eco_filt)[1]){
feature_dist[i,j] <- abs(morph_eco_filt$Mass[i]-morph_eco_filt$Mass[j])
}
}
plot(as.vector(feature_dist),as.vector(path_lengths), pch=20,col="red")
r <- cor(as.vector(feature_dist),as.vector(path_lengths))
weighted_edge <- igraph::get.edgelist(mst2.graph);
weighted_edge
weighted_edge <- igraph::get.edgelist(cor_dist*mst2.graph);
cor_dist*mst2.graph
as.matrix(cor_dist*mst2.graph)
as.matrix(cor_dist*mst2)
weighted_edge <- igraph::get.edgelist(as.matrix(cor_dist*mst2));
weighted_edge <- igraph::get.edgelist(igraph::graph.adjacency(as.matrix(cor_dist*mst2)));
weighted_edge
weighted_edge <- get.data.frame(igraph::graph.adjacency(as.matrix(cor_dist*mst2)));
weighted_edge
weighted_edge <- get.data.frame(igraph::graph.adjacency(as.matrix(cor_dist*mst2), weighted=TRUE));
weighted_edge
as.vector(feature_dist)
dim(feature_dist)
path_lengths[1:4,1:4]
path_lengths <- igraph::shortest.paths(mst2.graph, weights = weighted_edge[,3])
mst2.graph
dim(weighted_edge)
weighted_edge <- get.data.frame(igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE));
weighted_edge
path_lengths <- igraph::shortest.paths(mst2.graph, weights = weighted_edge[,3])
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2));
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
#     vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
mst2.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE);
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
#     vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
dist_mat
which(dist_mat==0)
which(dist_mat[1,]==0)
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
dist_mat[dist_mat==0] <- 0.001
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE);
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
binary_data <- counts_data
binary_data[binary_data > 0]=1
co_occur_mat <- binary_data%*%t(binary_data)
diag(co_occur_mat)=rep(0,dim(co_occur_mat)[1])
co_occur_mat[co_occur_mat<=2]=0
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
dist_mat[dist_mat==0] <- 0.001
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE);
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
cols1 <- c(RColorBrewer::brewer.pal(12, "Paired")[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
maptpx_fit <- maptpx::topics(t(counts_data), K=2, tol=0.0001)
theta <- maptpx_fit$theta;
max_clus <- apply(theta, 1, function(x) which.max(x))
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
mst2.graph
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
dist_mat[dist_mat==0] <- 1
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE);
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
dist_mat[dist_mat==0] <- 0.2
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE);
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
dist_mat <- as.matrix(dist(binary_data, method = "euclidean"))
dist_mat[dist_mat==0] <- 0.1
system.time(mst2 <- ape::mst(dist_mat));
mst2.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE);
plot(mst2.graph,
edge.arrow.mode=0,
vertex.size = 5,
vertex.shape="square",
vertex.label=NA,
vertex.color=cols1[as.numeric(max_clus) + 1],
#    layout=igraph::layout_as_tree
#    layout= layout.kamada.kawai
layout= layout_with_kk
)
path_lengths <- igraph::shortest.paths(mst2.graph)
path_lengths
path_lengths <- igraph::shortest.paths(mst2.graph)
par(mar=c(10,2,2,4))
weighted_edge <- cor_dist*mst2;
plot(as.vector(cor_dist),as.vector(path_lengths), pch=20,col="red")
morpheco <- read.csv("../external_data/MorphEco.csv");
morph_eco_filt <- morpheco[match(featureNames(feature_metadata),morpheco$Name),];
feature_dist <- matrix(0, dim(morph_eco_filt)[1], dim(morph_eco_filt)[1])
for(i in 1:dim(morph_eco_filt)[1]){
for(j in 1:dim(morph_eco_filt)[1]){
feature_dist[i,j] <- abs(morph_eco_filt$Mass[i]-morph_eco_filt$Mass[j])
}
}
plot(as.vector(feature_dist),as.vector(path_lengths), pch=20,col="red")
weighted_edge <- get.data.frame(igraph::graph.adjacency(as.matrix(dist_mat*mst2), weighted=TRUE));
path_lengths <- igraph::shortest.paths(mst2.graph, weights = weighted_edge[,3])
r <- cor(as.vector(feature_dist),as.vector(path_lengths))
path_lengths <- igraph::shortest.paths(mst2.graph)
path_lengths
morpheco <- read.csv("../external_data/MorphEco.csv");
morph_eco_filt <- morpheco[match(featureNames(feature_metadata),morpheco$Name),];
feature_dist <- matrix(0, dim(morph_eco_filt)[1], dim(morph_eco_filt)[1])
for(i in 1:dim(morph_eco_filt)[1]){
for(j in 1:dim(morph_eco_filt)[1]){
feature_dist[i,j] <- abs(morph_eco_filt$Mass[i]-morph_eco_filt$Mass[j])
}
}
plot(as.vector(feature_dist),as.vector(path_lengths), pch=20,col="red")
r <- cor(as.vector(feature_dist),as.vector(path_lengths))
Num_iter <- 50
r_rand <- array(0, Num_iter);
for(num in 1:Num_iter)
{
rand_counts <- picante::randomizeMatrix(counts_data, null.model="richness", iterations=1000);
binary_data <- rand_counts
binary_data[binary_data > 0]=1
dist_rand_mat <- as.matrix(dist(binary_data, method = "euclidean"))
dist_rand_mat[dist_rand_mat==0] <- 0.1
system.time(mst2.rand <- ape::mst(dist_rand_mat));
mst2.rand.graph <- igraph::graph.adjacency(as.matrix(dist_mat*mst2.rand), weighted=TRUE);
path_lengths_rand <- igraph::shortest.paths(mst2.rand.graph)
plot(as.vector(feature_dist),as.vector(path_lengths_rand), pch=20,col="red")
r_rand[num] <- cor(as.vector(feature_dist),as.vector(path_lengths_rand));
}
save(r_rand, file="../rdas/null_model_cor_richness.rda")
r_rand <- get(load("../rdas/null_model_cor_richness.rda"))
plot(density(r_rand))
abline(v=r)
plot(density(r_rand))
abline(v=r, col="red")
length(which(r_rand<r))/length(r_rand)
setwd("~/Documents/topotpx-ghpages/project/src")
morpheco <- read.csv("../external_data/MorphEco.csv");
setwd("~/Documents/topotpx-ghpages/project/src")
lambda_mat <- as.matrix(read.table("../sfa-out/Alex2016/sfa_alex_2_lambda.out"))
dim(lambda_mat)
f_mat <- as.matrix(read.table("../sfa-out/Alex2016/sfa_alex_2_f.out"))
dim(f_mat)
library(HimalayanBirdsAbundance)
data("HimalayanBirdsAbundance")
counts_data <- exprs(HimalayanBirdsAbundance)
sample_metadata <- pData(HimalayanBirdsAbundance)
feature_metadata <- featureData(HimalayanBirdsAbundance)
forest_patch_label <- row.names(sample_metadata)
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
rownames(lambda_mat) <- forest_patch_label
east_west_elevation = paste0(sample_metadata$WorE, "_", sample_metadata$Elevation);
index1 <- which(sample_metadata$WorE=="E");
index2 <- which(sample_metadata$WorE=="W");
elevation1 <- sample_metadata$Elevation[index1]; elevation2 <- sample_metadata$Elevation[index2];
index_WE <- c(index1[order(elevation1)], index2[order(elevation2)]);
forest_patch_label <- row.names(sample_metadata)
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
east_west_elevation = paste0(sample_metadata$WorE, "_", sample_metadata$Elevation);
index1 <- which(sample_metadata$WorE=="E");
index2 <- which(sample_metadata$WorE=="W");
elevation1 <- sample_metadata$Elevation[index1]; elevation2 <- sample_metadata$Elevation[index2];
index_WE <- c(index1[order(elevation1)], index2[order(elevation2)]);
k <- 1
barplot(t(f_mat)[index_WE,k],col=cbbPalette[1:K],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(lambda_mat[,k]),max(lambda_mat[,k])),cex.axis=1,cex.main=0.5)
K <- dim(f_mat)[1]
K
barplot(t(f_mat)[index_WE,k],col=cbbPalette[1:K],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(lambda_mat[,k]),max(lambda_mat[,k])),cex.axis=1,cex.main=0.5)
barplot(t(f_mat)[index_WE,k],col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(lambda_mat[,k]),max(lambda_mat[,k])),cex.axis=1,cex.main=0.5)
barplot(t(f_mat)[index_WE,k],col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(f_mat[k,]),max(f_mat[k,])),cex.axis=1,cex.main=0.5)
k <- 1
barplot(t(f_mat)[index_WE,k],col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(f_mat[k,]),max(f_mat[k,])),cex.axis=1,cex.main=0.5)
title(main=paste("Taxonomic Factor Loadings, loading:",k), cex.main=0.7)
combo_patch_dir = paste0(east_west_elevation);
combo_patch_dir_ordered = combo_patch_dir[index_WE];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2, cex.axis=0.5);
index_WE
k <- 1
for(k in 1:K){
barplot(t(f_mat)[index_WE,k],col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(f_mat[k,]),max(f_mat[k,])),cex.axis=1,cex.main=0.5)
title(main=paste("Taxonomic Factor Loadings, loading:",k), cex.main=0.7)
combo_patch_dir = paste0(east_west_elevation);
combo_patch_dir_ordered = combo_patch_dir[index_WE];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2, cex.axis=0.5);
}
dim(counts_data)
lambda_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_lambda.out"))
f_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_f.out"))
dim(lambda_mat)
dim(f_mat)
log_data <- log(counts_data+1);
log_data_transpose <- t(log_data);
dim(log_data)
dim(log_data_transpose)
lambda_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_lambda.out"))
f_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_f.out"))
dim(lambda_mat)
lambda_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_lambda.out"))
f_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_f.out"))
dim(lambda_mat)
lambda_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_lambda.out"))
f_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_f.out"))
dim(lambda_mat)
forest_patch_label <- row.names(sample_metadata)
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
east_west_elevation = paste0(sample_metadata$WorE, "_", sample_metadata$Elevation);
index1 <- which(sample_metadata$WorE=="E");
index2 <- which(sample_metadata$WorE=="W");
elevation1 <- sample_metadata$Elevation[index1]; elevation2 <- sample_metadata$Elevation[index2];
index_WE <- c(index1[order(elevation1)], index2[order(elevation2)]);
k <- 1
barplot(t(lambda_mat)[index_WE,k],col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(f_mat[k,]),max(f_mat[k,])),cex.axis=1,cex.main=0.5)
barplot(t(lambda_mat[index_WE,k]),col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(f_mat[k,]),max(f_mat[k,])),cex.axis=1,cex.main=0.5)
barplot(t(lambda_mat[index_WE,k]),col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(lambda_mat[,k]),max(lambda_mat[,k])),cex.axis=1,cex.main=0.5)
lambda_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_lambda.out"))
f_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_f.out"))
K <- dim(lambda_mat)[2]
forest_patch_label <- row.names(sample_metadata)
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
east_west_elevation = paste0(sample_metadata$WorE, "_", sample_metadata$Elevation);
index1 <- which(sample_metadata$WorE=="E");
index2 <- which(sample_metadata$WorE=="W");
elevation1 <- sample_metadata$Elevation[index1]; elevation2 <- sample_metadata$Elevation[index2];
index_WE <- c(index1[order(elevation1)], index2[order(elevation2)]);
k <- 1
for(k in 1:K){
barplot(t(lambda_mat[index_WE,k]),col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(lambda_mat[,k]),max(lambda_mat[,k])),cex.axis=1,cex.main=0.5)
title(main=paste("Taxonomic Factor Loadings, loading:",k), cex.main=0.7)
combo_patch_dir = paste0(east_west_elevation);
combo_patch_dir_ordered = combo_patch_dir[index_WE];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2, cex.axis=0.5);
}
lambda_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_lambda.out"))
f_mat <- as.matrix(read.table("../sfa-out/Alex2016/sparse_load/sfa_alex_f.out"))
K <- dim(lambda_mat)[2]
forest_patch_label <- row.names(sample_metadata)
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
east_west_elevation = paste0(sample_metadata$WorE, "_", sample_metadata$Elevation);
index1 <- which(sample_metadata$WorE=="E");
index2 <- which(sample_metadata$WorE=="W");
elevation1 <- sample_metadata$Elevation[index1]; elevation2 <- sample_metadata$Elevation[index2];
index_WE <- c(index1[order(elevation1)], index2[order(elevation2)]);
k <- 1
for(k in 1:K){
barplot(t(lambda_mat[index_WE,k]),col=cbbPalette[1],axisnames=F,space=0,border=NA,
main="",las=1,ylim=c(min(lambda_mat[,k]),max(lambda_mat[,k])),cex.axis=1,cex.main=0.5)
title(main=paste("Taxonomic Factor Loadings, loading:",k), cex.main=0.7)
combo_patch_dir = paste0(east_west_elevation);
combo_patch_dir_ordered = combo_patch_dir[index_WE];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2, cex.axis=0.5);
}
biocLite("Rsamtools")
library(Rsamtools)
library(Rsamtools)
setwd("~/Documents/ancient-damage")
mysam <- scan("125_all_chr.sam")
ncol <- 15 # adjust to number of cols in your file
mysam <- scan("125_all_chr.sam", what = list(rep(character(), ncol)), fill=TRUE)
dim(mysam)
mysam
sam[1,]
mysam[1,]
class(mysam)
mysam[[1]]
length(mysam)
names(mysam)
names(mysam[[1]])
lines <- readLines("125_all_chr.sam")
lines
lines[1]
lines[[1]]
